---
default_branch: origin/2.x
unreleased_version_title: Unreleased
sections:
  # The prelude section is implicitly included.
  - [upgrade, Upgrade Notes]
  - [deprecations, Deprecation Notes]
  - [features, New Features]
  - [issues, Known Issues]
  - [api, API Changes]
  - [security, Security Issues]
  - [fixes, Bug Fixes]
  - [other, Other Changes]

# The default is: (?P<pre_release>\.v?\d+(?:[ab]|rc)+\d*)$
# DEV: We have done this to fix how reno collapses pre-releases
#      into the canonical version.
#
#      We have moved the `\.v?\d+` to outside the named "pre_release"
#      matching group because otherwise reno will try to strip
#      ".0rc3" from the release note to match the canonical version
#      when instead it should be "rc3".
pre_release_tag_re: \.v?\d+(?P<pre_release>(?:[ab]|rc)+\d*)$
template: |
  ---
  #instructions:
  #    The style guide below provides explanations, instructions, and templates to write your own release note.
  #    Once finished, all irrelevant sections (including this instruction section) should be removed,
  #    and the release note should be committed with the rest of the changes.
  #
  #    The main goal of a release note is to provide a brief overview of a change and provide actionable steps to the user.
  #    The release note should clearly communicate what the change is, why the change was made, and how a user can migrate their code.
  #
  #    The release note should also clearly distinguish between announcements and user instructions. Use:
  #    * Past tense for previous/existing behavior (ex: ``resulted, caused, failed``)
  #    * Third person present tense for the change itself (ex: ``adds, fixes, upgrades``)
  #    * Active present infinitive for user instructions (ex: ``set, use, add``)
  #
  #    Release notes should:
  #    * Use plain language
  #    * Be concise
  #    * Include actionable steps with the necessary code changes
  #    * Include relevant links (bug issues, upstream issues or release notes, documentation pages)
  #    * Use full sentences with sentence-casing and punctuation.
  #    * Before using Datadog specific acronyms/terminology, a release note must first introduce them with a definition.
  #
  #    Release notes should not:
  #    * Be vague. Example: ``fixes an issue in tracing``.
  #    * Use overly technical language
  #    * Use dynamic links (``stable/latest/1.x`` URLs). Instead, use static links (specific version, commit hash) whenever possible so that they don't break in the future.
  prelude: >
      Usually in tandem with a new feature or major change, meant to provide context or background for a major change. 
      No specific format other than a required scope is provided and the author is requested to use their best judgment.
      Format: <scope>: <add_prelude_and_context_here>.
  features:
    - |
      For new features such as a new integration or component. Use present tense with the following format:
      Format: <scope>: This introduces <new_feature_or_component>.
  issues:
    - |
      For known issues. Use present tense with the following format:
      Format: <scope>: There is a known <symptom_of_issue> issue with <affected_code>.
      <provide_actionable_workaround_here>.
  upgrade:
    - |
      For enhanced functionality or if package dependencies are upgraded. If applicable, include instructions
      for how a user can migrate their code.
      Use present tense with the following formats, respectively for enhancements or removals:
      Format: <scope>: This upgrades <present_tense_explanation>. With this upgrade, you can <actionable_step_for_user>.
    - |
      Format: <scope>: <affected_code> is now removed. As an alternative to <affected_code>, you can use <alternative> instead.
  deprecations:
    - |
      Warning of a component or member of the public API being removed in the future.
      Use present tense for when deprecation actually happens and future tense for when removal is planned to happen. 
      Include deprecation/removal timeline, as well as workarounds and alternatives in the following format:
      Format: <scope>: <affected_code> is deprecated and will be removed in <version_to_be_removed>.
              As an alternative to <affected_code>, you can use <alternative> instead.
  fixes:
    - |
      For reporting bug fixes.
      Use past tense for the problem and present tense for the fix and solution in the following format:
      Format: <scope>: This fix resolves an issue where <ABC_bug> caused <XYZ_situation>.
  other:
    - |
      For any change which does not fall into any of the above categories. Since changes falling into this category are 
      likely rare and not very similar to each other, no specific format other than a required scope is provided. 
      The author is requested to use their best judgment to ensure a quality release note.
      Format: <scope>: <add_release_note_here>.
