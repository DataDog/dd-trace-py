interactions:
- request:
    body: '{"messages": [{"content": "Given a question, an answer, and sentences from
      the answer analyze the complexity of each sentence given under ''sentences''
      and break down each sentence into one or more fully understandable statements
      while also ensuring no pronouns are used in each statement. Format the outputs
      in JSON.\n\nThe output should be a well-formatted JSON instance that conforms
      to the JSON schema below.\n\nAs an example, for the schema {\"properties\":
      {\"foo\": {\"title\": \"Foo\", \"description\": \"a list of strings\", \"type\":
      \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe
      object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted instance of the schema.
      The object {\"properties\": {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere
      is the output JSON schema:\n```\n{\"type\": \"array\", \"items\": {\"$ref\":
      \"#/definitions/Statements\"}, \"definitions\": {\"Statements\": {\"title\":
      \"Statements\", \"type\": \"object\", \"properties\": {\"sentence_index\": {\"title\":
      \"Sentence Index\", \"description\": \"Index of the sentence from the statement
      list\", \"type\": \"integer\"}, \"simpler_statements\": {\"title\": \"Simpler
      Statements\", \"description\": \"the simpler statements\", \"type\": \"array\",
      \"items\": {\"type\": \"string\"}}}, \"required\": [\"sentence_index\", \"simpler_statements\"]}}}\n```\n\nDo
      not return any preamble or explanations, return only a pure JSON string surrounded
      by triple backticks (```).\n\nExamples:\n\nquestion: \"Who was Albert Einstein
      and what is he best known for?\"\nanswer: \"He was a German-born theoretical
      physicist, widely acknowledged to be one of the greatest and most influential
      physicists of all time. He was best known for developing the theory of relativity,
      he also made important contributions to the development of the theory of quantum
      mechanics.\"\nsentences: \"\\n        0:He was a German-born theoretical physicist,
      widely acknowledged to be one of the greatest and most influential physicists
      of all time. \\n        1:He was best known for developing the theory of relativity,
      he also made important contributions to the development of the theory of quantum
      mechanics.\\n        \"\nanalysis: ```[{\"sentence_index\": 0, \"simpler_statements\":
      [\"Albert Einstein was a German-born theoretical physicist.\", \"Albert Einstein
      is recognized as one of the greatest and most influential physicists of all
      time.\"]}, {\"sentence_index\": 1, \"simpler_statements\": [\"Albert Einstein
      was best known for developing the theory of relativity.\", \"Albert Einstein
      also made important contributions to the development of the theory of quantum
      mechanics.\"]}]```\n\nYour actual task:\n\nquestion: \"Is france part of europe?\"\nanswer:
      \"France is indeed part of europe\"\nsentences: \"\"\nanalysis: \n", "role":
      "user"}], "model": "gpt-4o-mini", "n": 1, "stream": false, "temperature": 1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2915'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.52.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.52.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.13
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySS2/bMBCE7/oVxJ6tQFb8qm89pAWCFn2k6MUyJIZayWwkkuWu0Ifh/x5QViQb
        bYFedNiPM5pZ8hgJAbqErQB1kKxa18SvP6cPH7/+WGzow/397fe3T1/STfruU/tQvr/7DbOgsI/f
        UPGL6kbZ1jXI2pozVh4lY3Cdr2/nSbJerZY9aG2JTZDVjuOFjVttdJwm6SJO1vF8M6gPVisk2Ipd
        JIQQx/4bcpoSf8JWJLOXSYtEskbYjoeEAG+bMAFJpImlYZhNUFnDaProRVHsjhkQhonCvLfPen+R
        AenQyefEkrFFwxTQLoM3XhqFQpNw0rOwlbjrvHV4k8H+tC+K4vJ3HquOZKhsuqYZ5qcxf2Nr5+0j
        DXycV9poOuQeJVkTshJbBz09RULs+z11V9XBeds6ztk+oQmGq2TYE0zXM9F0OUC2LJsL1Qiu/PIS
        WeqGLjYNSqoDlpN0uhbZldpegOii9Z9p/uZ9bq5N/T/2E1AKHWOZO4+lVteNp2Mew+v917Fxy31g
        oF/E2OaVNjV65/X57VQur5av5Ga+SNcVRKfoGQAA//8DAN2uIFBJAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8defb8f19b1c3992-IAD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 07 Nov 2024 19:27:45 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=GMAym2MnyZWZw_ORQOfRH7m0vuREaeNFf6gzJiHGy1k-1731007665-1.0.1.1-nArkb5npme6zrdpZ1L0Fho.0C5Glt5LEHaKERjf0koaMgNHOFfv34RUUXMfeQlNRjorW8a21hX7CcW0rBlX22w;
        path=/; expires=Thu, 07-Nov-24 19:57:45 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=2UlWnMHqlwf2iyqQoi_qr_fVNbYS7TQkpnENDD0iUfk-1731007665474-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - datadog-staging
      openai-processing-ms:
      - '458'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999324'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_a8016b4905b963ff5fd373af0e60e956
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Your task is to judge the faithfulness of a
      series of statements based on a given context. For each statement you must return
      verdict as 1 if the statement can be directly inferred based on the context
      or 0 if the statement can not be directly inferred based on the context.\n\nThe
      output should be a well-formatted JSON instance that conforms to the JSON schema
      below.\n\nAs an example, for the schema {\"properties\": {\"foo\": {\"title\":
      \"Foo\", \"description\": \"a list of strings\", \"type\": \"array\", \"items\":
      {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe object {\"foo\": [\"bar\",
      \"baz\"]} is a well-formatted instance of the schema. The object {\"properties\":
      {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere is the output
      JSON schema:\n```\n{\"type\": \"array\", \"items\": {\"$ref\": \"#/definitions/StatementFaithfulnessAnswer\"},
      \"definitions\": {\"StatementFaithfulnessAnswer\": {\"title\": \"StatementFaithfulnessAnswer\",
      \"type\": \"object\", \"properties\": {\"statement\": {\"title\": \"Statement\",
      \"description\": \"the original statement, word-by-word\", \"type\": \"string\"},
      \"reason\": {\"title\": \"Reason\", \"description\": \"the reason of the verdict\",
      \"type\": \"string\"}, \"verdict\": {\"title\": \"Verdict\", \"description\":
      \"the verdict(0/1) of the faithfulness.\", \"type\": \"integer\"}}, \"required\":
      [\"statement\", \"reason\", \"verdict\"]}}}\n```\n\nDo not return any preamble
      or explanations, return only a pure JSON string surrounded by triple backticks
      (```).\n\nExamples:\n\ncontext: \"John is a student at XYZ University. He is
      pursuing a degree in Computer Science. He is enrolled in several courses this
      semester, including Data Structures, Algorithms, and Database Management. John
      is a diligent student and spends a significant amount of time studying and completing
      assignments. He often stays late in the library to work on his projects.\"\nstatements:
      ```[\"John is majoring in Biology.\", \"John is taking a course on Artificial
      Intelligence.\", \"John is a dedicated student.\", \"John has a part-time job.\"]```\nanswer:
      ```[{\"statement\": \"John is majoring in Biology.\", \"reason\": \"John''s
      major is explicitly mentioned as Computer Science. There is no information suggesting
      he is majoring in Biology.\", \"verdict\": 0}, {\"statement\": \"John is taking
      a course on Artificial Intelligence.\", \"reason\": \"The context mentions the
      courses John is currently enrolled in, and Artificial Intelligence is not mentioned.
      Therefore, it cannot be deduced that John is taking a course on AI.\", \"verdict\":
      0}, {\"statement\": \"John is a dedicated student.\", \"reason\": \"The context
      states that he spends a significant amount of time studying and completing assignments.
      Additionally, it mentions that he often stays late in the library to work on
      his projects, which implies dedication.\", \"verdict\": 1}, {\"statement\":
      \"John has a part-time job.\", \"reason\": \"There is no information given in
      the context about John having a part-time job.\", \"verdict\": 0}]```\n\ncontext:
      \"Photosynthesis is a process used by plants, algae, and certain bacteria to
      convert light energy into chemical energy.\"\nstatements: ```[\"Albert Einstein
      was a genius.\"]```\nanswer: ```[{\"statement\": \"Albert Einstein was a genius.\",
      \"reason\": \"The context and statement are unrelated\", \"verdict\": 0}]```\n\nYour
      actual task:\n\ncontext: \"hello,  france is  part of europe\"\nstatements:
      \"[\\\"France is part of Europe.\\\"]\"\nanswer: \n", "role": "user"}], "model":
      "gpt-4o-mini", "n": 1, "stream": false, "temperature": 1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3657'
      content-type:
      - application/json
      cookie:
      - __cf_bm=GMAym2MnyZWZw_ORQOfRH7m0vuREaeNFf6gzJiHGy1k-1731007665-1.0.1.1-nArkb5npme6zrdpZ1L0Fho.0C5Glt5LEHaKERjf0koaMgNHOFfv34RUUXMfeQlNRjorW8a21hX7CcW0rBlX22w;
        _cfuvid=2UlWnMHqlwf2iyqQoi_qr_fVNbYS7TQkpnENDD0iUfk-1731007665474-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.52.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.52.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.13
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4xSwW6bQBC98xWjOZsIHBJbvvmQHCJVqprm0MYRrJcBtl12V7tD68jyv1dgbGy1
        VXvh8N68x5s3u48AUJW4ApSNYNk6Ha8/zZ8/rj+wWSc/u8UTPWXt12z9Qtn8y/MLznqF3X4jySfV
        jbSt08TKmiMtPQmm3jVd3KZJsri/vxuI1pake1ntOM5s3Cqj4nkyz+JkEafLUd1YJSngCl4jAID9
        8O1zmpJ2uIJkdkJaCkHUhKvzEAB6q3sERQgqsDCMs4mU1jCZIXpRFK/7DQYWTC0Z3uAKNvjohZEE
        KoATnsFW8NB56+hmgzPYoCcRrDmOfm4IBr8dA+2cVlKxfofBMAA3guEfbj/Il0oOf04Pb0VRXEb1
        VHVB9HWZTusRP5x317Z23m7DyJ/xShkVmvwYtN8zsHU4sIcI4G3ouLuqDZ23reOc7XcyveFiOXaM
        02kn9vZuJNmy0BO+TE/ElV9eEgulw8WVUArZUDlJp5OKrlT2gogutv49zZ+8j5srU/+P/URISY6p
        zJ2n/iZXG09jnvqX/7exc8tDYAzvganNK2Vq8s6r47urXJ5sRVKm86xKMTpEvwAAAP//AwA6IXqX
        hQMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8defb8f6280b3992-IAD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 07 Nov 2024 19:27:46 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - datadog-staging
      openai-processing-ms:
      - '821'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999152'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_397280c8d63c855801cfdc02b86052b2
    status:
      code: 200
      message: OK
version: 1
