interactions:
- request:
    body: '{"messages": [{"content": "Given a question, an answer, and sentences from
      the answer analyze the complexity of each sentence given under ''sentences''
      and break down each sentence into one or more fully understandable statements
      while also ensuring no pronouns are used in each statement. Format the outputs
      in JSON.\n\nThe output should be a well-formatted JSON instance that conforms
      to the JSON schema below.\n\nAs an example, for the schema {\"properties\":
      {\"foo\": {\"title\": \"Foo\", \"description\": \"a list of strings\", \"type\":
      \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe
      object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted instance of the schema.
      The object {\"properties\": {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere
      is the output JSON schema:\n```\n{\"type\": \"array\", \"items\": {\"$ref\":
      \"#/definitions/Statements\"}, \"definitions\": {\"Statements\": {\"title\":
      \"Statements\", \"type\": \"object\", \"properties\": {\"sentence_index\": {\"title\":
      \"Sentence Index\", \"description\": \"Index of the sentence from the statement
      list\", \"type\": \"integer\"}, \"simpler_statements\": {\"title\": \"Simpler
      Statements\", \"description\": \"the simpler statements\", \"type\": \"array\",
      \"items\": {\"type\": \"string\"}}}, \"required\": [\"sentence_index\", \"simpler_statements\"]}}}\n```\n\nDo
      not return any preamble or explanations, return only a pure JSON string surrounded
      by triple backticks (```).\n\nExamples:\n\nquestion: \"Who was Albert Einstein
      and what is he best known for?\"\nanswer: \"He was a German-born theoretical
      physicist, widely acknowledged to be one of the greatest and most influential
      physicists of all time. He was best known for developing the theory of relativity,
      he also made important contributions to the development of the theory of quantum
      mechanics.\"\nsentences: \"\\n        0:He was a German-born theoretical physicist,
      widely acknowledged to be one of the greatest and most influential physicists
      of all time. \\n        1:He was best known for developing the theory of relativity,
      he also made important contributions to the development of the theory of quantum
      mechanics.\\n        \"\nanalysis: ```[{\"sentence_index\": 0, \"simpler_statements\":
      [\"Albert Einstein was a German-born theoretical physicist.\", \"Albert Einstein
      is recognized as one of the greatest and most influential physicists of all
      time.\"]}, {\"sentence_index\": 1, \"simpler_statements\": [\"Albert Einstein
      was best known for developing the theory of relativity.\", \"Albert Einstein
      also made important contributions to the development of the theory of quantum
      mechanics.\"]}]```\n\nYour actual task:\n\nquestion: \"What is the capital of
      France?\"\nanswer: \"The capital of France is Paris\"\nsentences: \"\"\nanalysis:
      \n", "role": "user"}], "model": "gpt-4o-mini", "n": 1, "stream": false, "temperature":
      1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2919'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.47.1
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.47.1
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.13
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dJFPj9owEMXv+RSjOZNVklKycKPaReqhUtU/UluCEmMmiVvHtjxGAiG+
        e+XAAj304sP7+T2/GZ8SAFQ7XADKXgQ5OJ0uP7yT5vBRfX05vP46flkuV99/9tN21X86/iCcRIfd
        /iYZ3lxP0g5OU1DWXLD0JALF1Lwsynz+PM/ej2CwO9LR1rmQTm06KKPSIiumaVam+fPV3VsliXEB
        6wQA4DSesafZ0QEXkE3elIGYRUe4uF0CQG91VFAwKw7CBJzcobQmkBmrN02zPlXIFBVJ9RhfjflQ
        Ias4k685iEADmcARrSv81hNI4VQQGmwLKy+MJFAMn4VX/FTh5rxpmubxUU/tnkUc3Oy1vurn2xTa
        ds7bLV/5TW+VUdzXngRbExtzsA5Hek4ANuO29v8sAJ23gwt1sH/IxMBZll/y8P5Jd1rMrjDYIPSD
        qyj/56p3FITS/LBzvDRUprsnZLea45zIRw401K0yHXnn1eULWlfn2+10ls/Kdo7JOfkLAAD//wMA
        1fWuKJACAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c847da6df5d8c7b-EWR
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 24 Sep 2024 17:28:26 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=I1uA6Uw_kSHTz4C5HJeEgN8tlgahA.w4lNRH3SUXlTw-1727198906-1.0.1.1-jjjdJBAcMMJ3HfLtMRYpZMtzklqRQSbb7p235vOXdV1gO9TwAerAZ.q8lENyNlhVsGbZl0PRhc01Od06TKaPFg;
        path=/; expires=Tue, 24-Sep-24 17:58:26 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=cIQ0gHwgf7xZrO.PtD6BOsLZOjkubjxa5vGZKkAyIgQ-1727198906317-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      openai-organization:
      - datadog-staging
      openai-processing-ms:
      - '658'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999323'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_5a4a2d6012766c41e1df75ca1f91f8c0
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Your task is to judge the faithfulness of a
      series of statements based on a given context. For each statement you must return
      verdict as 1 if the statement can be directly inferred based on the context
      or 0 if the statement can not be directly inferred based on the context.\n\nThe
      output should be a well-formatted JSON instance that conforms to the JSON schema
      below.\n\nAs an example, for the schema {\"properties\": {\"foo\": {\"title\":
      \"Foo\", \"description\": \"a list of strings\", \"type\": \"array\", \"items\":
      {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe object {\"foo\": [\"bar\",
      \"baz\"]} is a well-formatted instance of the schema. The object {\"properties\":
      {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere is the output
      JSON schema:\n```\n{\"type\": \"array\", \"items\": {\"$ref\": \"#/definitions/StatementFaithfulnessAnswer\"},
      \"definitions\": {\"StatementFaithfulnessAnswer\": {\"title\": \"StatementFaithfulnessAnswer\",
      \"type\": \"object\", \"properties\": {\"statement\": {\"title\": \"Statement\",
      \"description\": \"the original statement, word-by-word\", \"type\": \"string\"},
      \"reason\": {\"title\": \"Reason\", \"description\": \"the reason of the verdict\",
      \"type\": \"string\"}, \"verdict\": {\"title\": \"Verdict\", \"description\":
      \"the verdict(0/1) of the faithfulness.\", \"type\": \"integer\"}}, \"required\":
      [\"statement\", \"reason\", \"verdict\"]}}}\n```\n\nDo not return any preamble
      or explanations, return only a pure JSON string surrounded by triple backticks
      (```).\n\nExamples:\n\ncontext: \"John is a student at XYZ University. He is
      pursuing a degree in Computer Science. He is enrolled in several courses this
      semester, including Data Structures, Algorithms, and Database Management. John
      is a diligent student and spends a significant amount of time studying and completing
      assignments. He often stays late in the library to work on his projects.\"\nstatements:
      ```[\"John is majoring in Biology.\", \"John is taking a course on Artificial
      Intelligence.\", \"John is a dedicated student.\", \"John has a part-time job.\"]```\nanswer:
      ```[{\"statement\": \"John is majoring in Biology.\", \"reason\": \"John''s
      major is explicitly mentioned as Computer Science. There is no information suggesting
      he is majoring in Biology.\", \"verdict\": 0}, {\"statement\": \"John is taking
      a course on Artificial Intelligence.\", \"reason\": \"The context mentions the
      courses John is currently enrolled in, and Artificial Intelligence is not mentioned.
      Therefore, it cannot be deduced that John is taking a course on AI.\", \"verdict\":
      0}, {\"statement\": \"John is a dedicated student.\", \"reason\": \"The context
      states that he spends a significant amount of time studying and completing assignments.
      Additionally, it mentions that he often stays late in the library to work on
      his projects, which implies dedication.\", \"verdict\": 1}, {\"statement\":
      \"John has a part-time job.\", \"reason\": \"There is no information given in
      the context about John having a part-time job.\", \"verdict\": 0}]```\n\ncontext:
      \"Photosynthesis is a process used by plants, algae, and certain bacteria to
      convert light energy into chemical energy.\"\nstatements: ```[\"Albert Einstein
      was a genius.\"]```\nanswer: ```[{\"statement\": \"Albert Einstein was a genius.\",
      \"reason\": \"The context and statement are unrelated\", \"verdict\": 0}]```\n\nYour
      actual task:\n\ncontext: \"The capital of France is Paris.\"\nstatements: \"[\\\"The
      capital of France is Paris.\\\"]\"\nanswer: \n", "role": "user"}], "model":
      "gpt-4o-mini", "n": 1, "stream": false, "temperature": 1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3661'
      content-type:
      - application/json
      cookie:
      - __cf_bm=I1uA6Uw_kSHTz4C5HJeEgN8tlgahA.w4lNRH3SUXlTw-1727198906-1.0.1.1-jjjdJBAcMMJ3HfLtMRYpZMtzklqRQSbb7p235vOXdV1gO9TwAerAZ.q8lENyNlhVsGbZl0PRhc01Od06TKaPFg;
        _cfuvid=cIQ0gHwgf7xZrO.PtD6BOsLZOjkubjxa5vGZKkAyIgQ-1727198906317-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.47.1
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.47.1
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.13
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dFFBbtswELz7FQuerUByDMvWrUERBCgKtEXbQ6NAoqiVtKlEsuQ6cGD4
        7wVlRUoPvfAwszOcnT2vAATVIgOhOslqsH304e5WmdNr9ePh1yf+/C3dfDx+/XnH3X3y51SJdVCY
        6hkVv6lulBlsj0xGX2nlUDIG1yTdpMlhf4h3IzGYGvsgay1HWxMNpCnaxJttFKdRsp/UnSGFXmTw
        uAIAOI9vyKlrPIkM4vUbMqD3skWRzUMAwpk+IEJ6T56lZrFeSGU0ox6jl2X5eM6FZ8k4oOZcZJCL
        7x2CkpZY9mAauHdSKwTy8EU68je5WEMuHEpv9CKYPcKghJocKgaHFplCLcGJOwTSjXGDHCHrzAvV
        WAPpkRuTnXj64QVdTWrMlFyeyrJ8v4TD5uhlKFIf+37CL3MrvWmtM5Wf+BlvSJPvimv40IBnY8XI
        XlYAT2P7x38KFdaZwXLB5jfqYJim+6ufWI6+sLeHiWTDsl/wfZL+T1XUyJJ6/+6GU72k28UhnmOO
        ewr/6hmHoiHdorOOridtbJFU1XaX7NLmIFaX1V8AAAD//wMAuSoB7eACAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c847dacae048c7b-EWR
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 24 Sep 2024 17:28:27 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      openai-organization:
      - datadog-staging
      openai-processing-ms:
      - '692'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999151'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_376662532427f06b013847368172d0b6
    status:
      code: 200
      message: OK
version: 1
