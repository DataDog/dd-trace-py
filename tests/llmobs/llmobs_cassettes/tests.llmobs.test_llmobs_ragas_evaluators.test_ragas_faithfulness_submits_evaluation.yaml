interactions:
- request:
    body: '{"messages": [{"content": "Given a question, an answer, and sentences from
      the answer analyze the complexity of each sentence given under ''sentences''
      and break down each sentence into one or more fully understandable statements
      while also ensuring no pronouns are used in each statement. Format the outputs
      in JSON.\n\nThe output should be a well-formatted JSON instance that conforms
      to the JSON schema below.\n\nAs an example, for the schema {\"properties\":
      {\"foo\": {\"title\": \"Foo\", \"description\": \"a list of strings\", \"type\":
      \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe
      object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted instance of the schema.
      The object {\"properties\": {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere
      is the output JSON schema:\n```\n{\"type\": \"array\", \"items\": {\"$ref\":
      \"#/definitions/Statements\"}, \"definitions\": {\"Statements\": {\"title\":
      \"Statements\", \"type\": \"object\", \"properties\": {\"sentence_index\": {\"title\":
      \"Sentence Index\", \"description\": \"Index of the sentence from the statement
      list\", \"type\": \"integer\"}, \"simpler_statements\": {\"title\": \"Simpler
      Statements\", \"description\": \"the simpler statements\", \"type\": \"array\",
      \"items\": {\"type\": \"string\"}}}, \"required\": [\"sentence_index\", \"simpler_statements\"]}}}\n```\n\nDo
      not return any preamble or explanations, return only a pure JSON string surrounded
      by triple backticks (```).\n\nExamples:\n\nquestion: \"Who was Albert Einstein
      and what is he best known for?\"\nanswer: \"He was a German-born theoretical
      physicist, widely acknowledged to be one of the greatest and most influential
      physicists of all time. He was best known for developing the theory of relativity,
      he also made important contributions to the development of the theory of quantum
      mechanics.\"\nsentences: \"\\n        0:He was a German-born theoretical physicist,
      widely acknowledged to be one of the greatest and most influential physicists
      of all time. \\n        1:He was best known for developing the theory of relativity,
      he also made important contributions to the development of the theory of quantum
      mechanics.\\n        \"\nanalysis: ```[{\"sentence_index\": 0, \"simpler_statements\":
      [\"Albert Einstein was a German-born theoretical physicist.\", \"Albert Einstein
      is recognized as one of the greatest and most influential physicists of all
      time.\"]}, {\"sentence_index\": 1, \"simpler_statements\": [\"Albert Einstein
      was best known for developing the theory of relativity.\", \"Albert Einstein
      also made important contributions to the development of the theory of quantum
      mechanics.\"]}]```\n\nYour actual task:\n\nquestion: \"What is the capital of
      France?\"\nanswer: \"The capital of France is Paris\"\nsentences: \"\"\nanalysis:
      \n", "role": "user"}], "model": "gpt-4o-mini", "n": 1, "stream": false, "temperature":
      1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2919'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.47.1
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.47.1
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.13
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2yRwW7bMBBE7/oKYs9WIKupnPjWSwIEBdIWLVDUMiSKWklsKZLlros0hv+9oKzY
        LpILDzOcx53lPhECdAtrAWqQrEZv0g/3z1++qe+PT/hs7340n3+rrOgf8uaj+fMYYBETrvmJil9S
        V8qN3iBrZ4+2CigZI3W5ym+KZb66LSZjdC2aGOs9p9cuHbXVaZ7l12m2Spc3c3pwWiHBWmwSIYTY
        T2ec07b4BGuRLV6UEYlkj7A+XRICgjNRAUmkiaVlWJxN5SyjnUav63qzL4EwKgqrCV9OfFEC6dgp
        VMSScUTLFK1NCV8HFEp6zdII14m7IK1CoUl8kkHTVQnbw7au68tHA3Y7krG43Rkz64dTC+N6H1xD
        s3/SO201DVVASc7GiYmdh8k9JEJsp23t/lsA+OBGzxW7X2gjsMiWRx6cP+ns5sVssmNpLlL5avEG
        r2qRpTZ0sW9QUg3YnqNZclHu9aNvIY4Fte1fUZKZBPSXGMeq07bH4IM+/mDnK8ybFt+/wwIhOST/
        AAAA//8DAD61UaDPAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8d0b547abf9d4344-EWR
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 11 Oct 2024 02:13:17 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=3I.CuJ9tQaqq7Jx.t7O30MCyIVhzXMEkGtUDStmGLFI-1728612797-1.0.1.1-UfFUouoFk6_F_6iTXteAc7boZ2Hybrk5WPrAaOI48QjlyzB6B0hFWImunuI8vYWwm81M.ktGGPKzM_DQVTIhGg;
        path=/; expires=Fri, 11-Oct-24 02:43:17 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=0Mm7Wrm.ONaGvoj9p0V0_AxBr0qQwuuVewSp_X52yWU-1728612797380-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - datadog-staging
      openai-processing-ms:
      - '689'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999323'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_b91d27a89865f02b1cc739e0f4084331
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Your task is to judge the faithfulness of a
      series of statements based on a given context. For each statement you must return
      verdict as 1 if the statement can be directly inferred based on the context
      or 0 if the statement can not be directly inferred based on the context.\n\nThe
      output should be a well-formatted JSON instance that conforms to the JSON schema
      below.\n\nAs an example, for the schema {\"properties\": {\"foo\": {\"title\":
      \"Foo\", \"description\": \"a list of strings\", \"type\": \"array\", \"items\":
      {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe object {\"foo\": [\"bar\",
      \"baz\"]} is a well-formatted instance of the schema. The object {\"properties\":
      {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere is the output
      JSON schema:\n```\n{\"type\": \"array\", \"items\": {\"$ref\": \"#/definitions/StatementFaithfulnessAnswer\"},
      \"definitions\": {\"StatementFaithfulnessAnswer\": {\"title\": \"StatementFaithfulnessAnswer\",
      \"type\": \"object\", \"properties\": {\"statement\": {\"title\": \"Statement\",
      \"description\": \"the original statement, word-by-word\", \"type\": \"string\"},
      \"reason\": {\"title\": \"Reason\", \"description\": \"the reason of the verdict\",
      \"type\": \"string\"}, \"verdict\": {\"title\": \"Verdict\", \"description\":
      \"the verdict(0/1) of the faithfulness.\", \"type\": \"integer\"}}, \"required\":
      [\"statement\", \"reason\", \"verdict\"]}}}\n```\n\nDo not return any preamble
      or explanations, return only a pure JSON string surrounded by triple backticks
      (```).\n\nExamples:\n\ncontext: \"John is a student at XYZ University. He is
      pursuing a degree in Computer Science. He is enrolled in several courses this
      semester, including Data Structures, Algorithms, and Database Management. John
      is a diligent student and spends a significant amount of time studying and completing
      assignments. He often stays late in the library to work on his projects.\"\nstatements:
      ```[\"John is majoring in Biology.\", \"John is taking a course on Artificial
      Intelligence.\", \"John is a dedicated student.\", \"John has a part-time job.\"]```\nanswer:
      ```[{\"statement\": \"John is majoring in Biology.\", \"reason\": \"John''s
      major is explicitly mentioned as Computer Science. There is no information suggesting
      he is majoring in Biology.\", \"verdict\": 0}, {\"statement\": \"John is taking
      a course on Artificial Intelligence.\", \"reason\": \"The context mentions the
      courses John is currently enrolled in, and Artificial Intelligence is not mentioned.
      Therefore, it cannot be deduced that John is taking a course on AI.\", \"verdict\":
      0}, {\"statement\": \"John is a dedicated student.\", \"reason\": \"The context
      states that he spends a significant amount of time studying and completing assignments.
      Additionally, it mentions that he often stays late in the library to work on
      his projects, which implies dedication.\", \"verdict\": 1}, {\"statement\":
      \"John has a part-time job.\", \"reason\": \"There is no information given in
      the context about John having a part-time job.\", \"verdict\": 0}]```\n\ncontext:
      \"Photosynthesis is a process used by plants, algae, and certain bacteria to
      convert light energy into chemical energy.\"\nstatements: ```[\"Albert Einstein
      was a genius.\"]```\nanswer: ```[{\"statement\": \"Albert Einstein was a genius.\",
      \"reason\": \"The context and statement are unrelated\", \"verdict\": 0}]```\n\nYour
      actual task:\n\ncontext: \"The capital of France is Paris.\"\nstatements: \"[\\\"The
      capital of France is Paris.\\\"]\"\nanswer: \n", "role": "user"}], "model":
      "gpt-4o-mini", "n": 1, "stream": false, "temperature": 1e-08}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3661'
      content-type:
      - application/json
      cookie:
      - __cf_bm=3I.CuJ9tQaqq7Jx.t7O30MCyIVhzXMEkGtUDStmGLFI-1728612797-1.0.1.1-UfFUouoFk6_F_6iTXteAc7boZ2Hybrk5WPrAaOI48QjlyzB6B0hFWImunuI8vYWwm81M.ktGGPKzM_DQVTIhGg;
        _cfuvid=0Mm7Wrm.ONaGvoj9p0V0_AxBr0qQwuuVewSp_X52yWU-1728612797380-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.47.1
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.47.1
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.13
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSy27bMBC86ysWPFuBH6nl6OZLeohRFEbQFo0CiaZW0qYSyZJrI63hfy8oK5aL
        5MLDzM5wdshjBCCoFCkI1UhWnW3j9ee/228/fq7rw/et2WzWyct2sbl/eHz48ntpxSQozO4FFb+p
        bpTpbItMRp9p5VAyBtdZMl8tZ/PkLumJzpTYBlltOb41cUea4vl0fhtPk3i2GtSNIYVepPAUAQAc
        +zPk1CW+ihSmkzekQ+9ljSK9DAEIZ9qACOk9eZaaxWQkldGMuo9eFMXTMROeJWOHmjORQiYeGwQl
        LbFswVRw76RWCOThq3TkbzIxgUw4lN7oUXDxCIMSSnKoGBxaZAq1BCduEEhXxnWyh6wzByqxBNI9
        1yd75eGGA7qSVJ9pdnouiuJ6CYfV3stQpN637YCfLq20prbO7PzAX/CKNPkmP4cPDXg2VvTsKQJ4
        7tvf/1eosM50lnM2v1AHwyRZnf3E+Ogju7gbSDYs2xFfzZLJB355iSyp9VfvJ5RUDZajdBpdLff+
        0o8szguSrt+5RIOT8H88Y5dXpGt01tH5R1Q2x/muxE8LXKKITtE/AAAA//8DADWAJv4fAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8d0b54801e124344-EWR
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 11 Oct 2024 02:13:18 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - datadog-staging
      openai-processing-ms:
      - '1092'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999151'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_7cd8e3d5f34a749f0c445fc00f40434e
    status:
      code: 200
      message: OK
version: 1
