name: Framework tests

on:
  push:
    branches:
      - master
      - 0.x
      - 1.x
  pull_request:

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
  bottle-testsuite-0_12_19:
    runs-on: ubuntu-latest
    env:
      DD_PROFILING_ENABLED: true
      DD_TESTING_RAISE: true
    defaults:
      run:
        working-directory: bottle
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - uses: actions/checkout@v3
        with:
          path: ddtrace
      - uses: actions/checkout@v3
        with:
          repository: bottlepy/bottle
          ref: master
          path: bottle
      - name: Install Dependencies
        run: sudo apt-get install -y libev-dev
      - name: Test dependencies (Server back-ends and template engines)
      # Taken from install script inside of .github/workflows of test suite (https://github.com/bottlepy/bottle/blob/master/.github/workflows/run_tests.yml)
        run: |
          pip install -U pip pytest
          pip install mako jinja2
          for name in waitress "cherrypy<9" cheroot paste tornado twisted diesel meinheld\
            gunicorn eventlet flup bjoern gevent aiohttp-wsgi uvloop; do
            pip install $name || echo "Failed to install $name with $(python -V 2>&1)" 1>&2
          done
      - name: Inject ddtrace
        run: pip install ../ddtrace
        # Allows tests to continue through deprecation warnings for jinja2 and mako
      - name: Run tests
        # Disable all test_simple tests because they check for
        # log output and it contains phony error messages.
        run: PYTHONPATH=../ddtrace/tests/debugging/exploration/ ddtrace-run pytest test --continue-on-collection-errors -v -k 'not test_simple'

  django-testsuite-3_1:
    runs-on: ubuntu-latest
    env:
      DD_PROFILING_ENABLED: true
      DD_TESTING_RAISE: true
      DD_DEBUGGER_EXPL_ENCODE: 0  # Disabled to speed up
      DD_REMOTE_CONFIGURATION_ENABLED: false
      PYTHONPATH: ../ddtrace/tests/debugging/exploration/:.
    defaults:
      run:
        working-directory: django
    steps:
      - uses: actions/checkout@v3
        with:
          path: ddtrace
      - uses: actions/checkout@v3
        with:
          repository: django/django
          ref: stable/3.1.x
          path: django
      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Install pylibmc libmemcached package
        # Django-specific: pylibmc in Ubuntu requires libmemcached package
        run: sudo apt install libmemcached-dev zlib1g
      - name: Install dependencies
        # Django-specific: separate dependencies for tests
        run: pip install -r tests/requirements/py3.txt
      - name: Install ddtrace
        run: pip install ../ddtrace
      - name: Install django
        run: pip install -e .
      - name: Disable unsupported tests
        run: |
          # Note: test_supports_json_field_operational_error will fail with the tracer
          # DEV: Insert @skipUnless before the test definition
          # DEV: We need to escape the space indenting
          sed -i'' '/def test_supports_json_field_operational_error/i \ \ \ \ @skipUnless(False, "test not supported by dd-trace-py")' tests/backends/sqlite/test_features.py
          sed -i'' 's/if not filename.startswith(os.path.dirname(django.__file__))/if False/' django/conf/__init__.py
          sed -i'' 's/test_paginating_unordered_queryset_raises_warning/paginating_unordered_queryset_raises_warning/' tests/pagination/tests.py
          sed -i'' 's/test_access_warning/access_warning/' tests/auth_tests/test_password_reset_timeout_days.py
          sed -i'' 's/test_get_or_set_version/get_or_set_version/' tests/cache/tests.py
          sed -i'' 's/test_avoid_infinite_loop_on_too_many_subqueries/avoid_infinite_loop_on_too_many_subqueries/' tests/queries/tests.py
          sed -i'' 's/test_multivalue_dict_key_error/multivalue_dict_key_error/' tests/view_tests/tests/test_debug.py  # Sensitive data leak
          sed -i'' 's/test_db_table/db_table/' tests/schema/tests.py

      - name: Run tests
        # django.tests.requests module interferes with requests library patching in the tracer -> disable requests patch
        run: DD_TRACE_REQUESTS_ENABLED=0 ddtrace-run tests/runtests.py

  graphene-testsuite-3_0:
    runs-on: ubuntu-latest
    env:
      DD_PROFILING_ENABLED: true
      DD_TESTING_RAISE: true
      PYTHONPATH: ../ddtrace/tests/debugging/exploration/:.
    defaults:
      run:
        working-directory: graphene
    steps:
      - uses: actions/checkout@v3
        with:
          path: ddtrace
      - uses: actions/checkout@v3
        with:
          repository: graphql-python/graphene
          # TODO: bump ref to `graphene>3.0.0`.
          # Unreleased CI fix: https://github.com/graphql-python/graphene/pull/1412
          ref: 03277a55123fd2f8a8465c5fa671f7fb0d004c26
          path: graphene
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install graphene
        run: pip install -e "../graphene[test]"
      - name: "Upgrade pytest_asyncio"
        # pytest_asyncio==0.17 raises `assert type in (None, "pathlist", "args", "linelist", "bool")`
        # https://github.com/graphql-python/graphene/blob/03277a55123fd2f8a8465c5fa671f7fb0d004c26/setup.py#L52
        run: pip install "pytest-asyncio>0.17,<2"
      - name: Install ddtrace
        run: pip install ../ddtrace
      - name: Run tests
        run: ddtrace-run pytest graphene

  fastapi-testsuite-0_75:
    runs-on: ubuntu-latest
    env:
      DD_TESTING_RAISE: true
      DD_PROFILING_ENABLED: true
    defaults:
      run:
        working-directory: fastapi
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - uses: actions/checkout@v3
        with:
          path: ddtrace
      - uses: actions/checkout@v3
        with:
          repository: tiangolo/fastapi
          ref: 0.75.0
          path: fastapi
      - uses: actions/cache@v3.0.11
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ env.pythonLocation }}-fastapi
      #This step installs Flit, a way to put Python packages and modules on PyPI (More info at https://flit.readthedocs.io/en/latest/)
      - name: Install Flit
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install flit
      #Installs all dependencies needed for FastAPI
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: flit install --symlink
      - name: Pin SQLAlchemy
        # https://github.com/encode/databases/issues/512
        run: pip install "SQLAlchemy==1.4.41"
      - name: Inject ddtrace
        run: pip install ../ddtrace
      - name: Test
        run: PYTHONPATH=../ddtrace/tests/debugging/exploration/ ddtrace-run pytest -p no:warnings tests

  flask-testsuite-1_1_4:
    runs-on: ubuntu-latest
    env:
      TOX_TESTENV_PASSENV: DD_TESTING_RAISE DD_PROFILING_ENABLED
      DD_TESTING_RAISE: true
      DD_PROFILING_ENABLED: true
      PYTHONPATH: ../ddtrace/tests/debugging/exploration/
    defaults:
      run:
        working-directory: flask
    steps:
      - uses: actions/checkout@v3
        with:
          path: ddtrace
      - uses: actions/checkout@v3
        with:
          repository: pallets/flask
          ref: 1.1.4
          path: flask
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Install tox
        run: pip install tox
      - name: Create tox env
        run: tox -e py38 --notest
      - name: Add pytest configuration for ddtrace
        run: echo -e "[pytest]\nddtrace-patch-all = 1" > pytest.ini
      - name: Run tests
        # test_exception_propagation is broken upstream
        run: |
          source .tox/py38/bin/activate
          pip install ../ddtrace
          pip install -e .
          pip install --upgrade MarkupSafe==2.0.1
          pytest -p no:warnings -k 'not test_exception_propagation and not test_memory_consumption' tests/

  httpx-testsuite-0_22_0:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: httpx
    steps:
      - uses: actions/checkout@v3
        with:
          path: ddtrace
      - uses: actions/checkout@v3
        with:
          repository: encode/httpx
          ref: 0.22.0
          path: httpx
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Inject ddtrace
        run: pip install ../ddtrace
      - name: Add pytest configuration for ddtrace
        run: echo -e "[pytest]\nddtrace-patch-all = 1" > pytest.ini
      - name: Run tests
        env:
          # Disabled distributed tracing since there are a lot of tests that assert on headers
          DD_HTTPX_DISTRIBUTED_TRACING: "false"
          # Debugger exploration testing does not work in CI
          # PYTHONPATH: ../ddtrace/tests/debugging/exploration/
        # test_pool_timeout raises RuntimeError: The connection pool was closed while 1 HTTP requests/responses were still in-flight
        run: pytest -k 'not test_pool_timeout'

  mako-testsuite-1_1_4:
    runs-on: ubuntu-latest
    env:
      TOX_TESTENV_PASSENV: DD_TESTING_RAISE DD_PROFILING_ENABLED
      DD_TESTING_RAISE: true
      DD_PROFILING_ENABLED: true
      PYTHONPATH: ../ddtrace/tests/debugging/exploration/
    defaults:
      run:
        working-directory: mako
    steps:
      - uses: actions/checkout@v3
        with:
          path: ddtrace
      - uses: actions/checkout@v3
        with:
          repository: sqlalchemy/mako
          ref: rel_1_1_4
          path: mako
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Install tox
        run: pip install tox
      - name: Pin pygments to avoid breaking test
        run: sed -i 's/pygments/pygments~=2.11.0/' tox.ini
      - name: Create tox env
        run: tox -e py --notest
      - name: Add pytest configuration for ddtrace
        run: echo -e "[pytest]\nddtrace-patch-all = 1" > pytest.ini
      - name: Run tests
        run: |
          source .tox/py/bin/activate
          pip install ../ddtrace
          pip install -e .
          pytest -p no:warnings

  starlette-testsuite-0_17_1:
    runs-on: "ubuntu-latest"
    env:
      DD_TESTING_RAISE: true
      DD_PROFILING_ENABLED: true
      PYTHONPATH: ../ddtrace/tests/debugging/exploration/
    defaults:
      run:
        working-directory: starlette
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - uses: actions/checkout@v3
        with:
          path: ddtrace
      - uses: actions/checkout@v3
        with:
          repository: encode/starlette
          ref: 0.17.1
          path: starlette
      - name: Install ddtrace
        run: pip install ../ddtrace
      - name: Install dependencies
        run: scripts/install
      - name: Pin SQLAlchemy
        # https://github.com/encode/databases/issues/512
        run: pip install "SQLAlchemy==1.4.41"
      #Parameters for keyword expression skip 3 failing tests that are expected due to asserting on headers. The errors are because our context propagation headers are being added
      #test_staticfiles_with_invalid_dir_permissions_returns_401 fails with and without ddtrace enabled
      - name: Run tests
        run: pytest -W ignore --ddtrace-patch-all tests -k 'not test_request_headers and not test_subdomain_route and not test_websocket_headers and not test_staticfiles_with_invalid_dir_permissions_returns_401'

  requests-testsuite-2_26_0:
    runs-on: "ubuntu-latest"
    env:
      DD_TESTING_RAISE: true
      DD_PROFILING_ENABLED: true
    defaults:
      run:
        working-directory: requests
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - uses: actions/checkout@v3
        with:
          path: ddtrace
      - uses: actions/checkout@v3
        with:
          repository: psf/requests
          ref: v2.26.0
          path: requests
      - name: Install ddtrace
        run: pip install ../ddtrace
      - name: Install dependencies
        run: "make init"
      - name: MarkupSafe fix
        run: pip install --upgrade MarkupSafe==2.0.1
      - name: Run tests
        run: PYTHONPATH=../ddtrace/tests/debugging/exploration/ ddtrace-run pytest -p no:warnings tests

  asyncpg-testsuite-0_25_0:
    # https://github.com/MagicStack/asyncpg/blob/v0.25.0/.github/workflows/tests.yml#L125
    runs-on: "ubuntu-latest"
    env:
      DD_TESTING_RAISE: true
      DD_PROFILING_ENABLED: true
      DD_REMOTE_CONFIGURATION_ENABLED: false
    defaults:
      run:
        working-directory: asyncpg
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - uses: actions/checkout@v3
        with:
          path: ddtrace
      - uses: actions/checkout@v3
        with:
          repository: magicstack/asyncpg
          ref: v0.25.0
          path: asyncpg
          fetch-depth: 50
          submodules: true
      - name: Install ddtrace
        run: pip install ../ddtrace
      - name: Install dependencies
        run: |
          python -m pip install -U pip setuptools wheel pytest
          python -m pip install -e .[test]
      - name: Run tests
        # Disable tests checking GC references since profiling can interfere
        run: ddtrace-run python -m pytest -k 'not test_record_gc and not test_record_get and not test_record_items and not test_record_iter' tests

  pylons-testsuite-1_0_3:
    name: Pylons 1.0.3
    runs-on: "ubuntu-latest"
    env:
      DD_TESTING_RAISE: true
      PYTHONPATH: ../ddtrace/tests/debugging/exploration/
    defaults:
      run:
        working-directory: pylons
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '2.7'
      - uses: actions/checkout@v2
        with:
          path: ddtrace
      - uses: actions/checkout@v2
        with:
          repository: pylons/pylons
          ref: master
          path: pylons
      - name: Install ddtrace
        run: pip install ../ddtrace
      - name: Install test dependencies
        run: pip install -e .[test]
      - name: Pin PasteDeploy to Python 2.7 compatible version
        run: pip install pastedeploy==2.1.1
      - name: MarkupSafe fix
        run: pip install --upgrade MarkupSafe==0.18 pip setuptools --force
      - name: Disable failing tests
        run: |
          sed -i'' "s/test_detect_lang/detect_lang/g" tests/test_units/test_basic_app.py
          sed -i'' "s/test_langs/langs/g" tests/test_units/test_basic_app.py
      - name: Run tests
        run: nosetests
