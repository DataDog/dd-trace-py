name: Build

on:
  pull_request:
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      expectedVersion:
        description: 'Expected version string'
        required: true
  schedule:
    # Nightly builds after weekdays
    - cron:  0 2 * * 2-6

jobs:
  build_wheels_py27_35:
    name: Build and test wheels on ${{ matrix.os }} (${{ matrix.archs }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
         - os: ubuntu-latest
           archs: x86_64 i686
         - os: ubuntu-latest
           archs: aarch64
         - os: windows-latest
           archs: AMD64 x86
         - os: macos-latest
           archs: x86_64 universal2
    steps:
      - uses: actions/checkout@v3
        # Include all history and tags
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.8'

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheels python 2.7 and 3.5
        uses: joerick/cibuildwheel@v1.12.0
        env:
          # configure cibuildwheel to build native archs ('auto'), and some
          # emulated ones
          CIBW_ARCHS: ${{ matrix.archs }}
          # PyPY is not supported
          # Windows 2.7 wheels no longer can be built https://github.com/DataDog/dd-trace-py/pull/2344
          CIBW_SKIP: cp27-win*
          CIBW_BUILD: cp27* cp35*
          # Run a smoke test on every supported platform
          CIBW_TEST_COMMAND: python {project}/tests/smoke_test.py
          # Testing arm on MacOS is currently not supported by Github
          CIBW_TEST_SKIP: "*-macosx_universal2:arm64"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_wheels_py3:
    name: Build and test wheels on ${{ matrix.os }} (${{ matrix.archs }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
         - os: ubuntu-latest
           archs: x86_64 i686
         - os: ubuntu-latest
           archs: aarch64
         - os: windows-latest
           archs: AMD64 x86
         - os: macos-latest
           archs: x86_64 universal2
    steps:
      - uses: actions/checkout@v3
        # Include all history and tags
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.8'

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheels python 3.6 and above
        uses: pypa/cibuildwheel@v2.11.1
        env:
          # configure cibuildwheel to build native archs ('auto'), and some
          # emulated ones
          CIBW_ARCHS: ${{ matrix.archs }}
          CIBW_BUILD: cp3*
          # Run a smoke test on every supported platform
          CIBW_TEST_COMMAND: python {project}/tests/smoke_test.py
          # Testing arm on MacOS is currently not supported by Github
          CIBW_TEST_SKIP: "*-macosx_universal2:arm64"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        # Include all history and tags
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.7'

      - name: Build sdist
        run: |
          pip install cython
          python setup.py sdist
      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  test_alpine_sdist:
    # alpine is the only environment not built/tested by cibuildwheel
    name: Test source distribution on Alpine Linux
    needs: [build_sdist]
    runs-on: ubuntu-latest
    container:
      image: python:3.9-alpine
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - name: Install build dependencies
        # Rust + Cargo are needed for Cryptography
        run: apk add git gcc g++ musl-dev libffi-dev openssl-dev bash rust cargo

      - name: Check source package
        run: |
          pip install twine readme_renderer[md]
          twine check dist/*.tar.gz
      - name: Install source package
        run: pip install dist/*.tar.gz

      - name: Test the source package
        run: python $GITHUB_WORKSPACE/tests/smoke_test.py
        # Move out of the workspace to avoid importing ddtrace from the source
        working-directory: /

  upload_pypi:
    needs: [build_wheels_py27_35, build_wheels_py3, test_alpine_sdist]
    runs-on: ubuntu-latest
    if: (github.event_name == 'release' && github.event.action == 'published') || (github.event_name == 'workflow_dispatch')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - uses: actions/checkout@v3
        if: github.event_name == 'workflow_dispatch'
        # Include all history and tags
        with:
          fetch-depth: 0
      - name: Validate deploy version
        if: github.event_name == 'workflow_dispatch'
        run: |
          ./scripts/validate-version "${{ github.event.inputs.expectedVersion }}"
      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          # To test: repository_url: https://test.pypi.org/legacy/
          # Setting skip_existing will prevent the deploy from erring out early
          # due to a duplicate wheel being present which will ensure that the rest
          # of the wheels will be uploaded if some are uploaded manually.
          skip_existing: true
