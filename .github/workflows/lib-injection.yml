name: "Library Injection"
on:
  push:

jobs:
  build-and-publish-init-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Copy python tracer
      run: |
        mkdir lib-injection/dd-trace-py/
        rsync -a . lib-injection/dd-trace-py/ --exclude lib-injection
     
    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: Set Docker Image Tag
      id: set_names
      run: |
        
        DOCKER_IMAGE_NAME=dd-lib-python-init
        DOCKER_IMAGE_NAME=$(echo ghcr.io/${GITHUB_REPOSITORY}/${DOCKER_IMAGE_NAME} | tr '[:upper:]' '[:lower:]')
        DOCKER_IMAGE_NAME_WITH_TAG=$(echo ${DOCKER_IMAGE_NAME}:${{ github.sha }} | tr '[:upper:]' '[:lower:]')
        echo "PRIMERO ES ANTES"
        echo "ANTEST ${GITHUB_HEAD_REF}"
        echo "ANTEST222 ${GITHUB_REF##*/}"
         echo "ANTEST3333333 ${GITHUB_REF}"
        echo $(echo ${GITHUB_HEAD_REF-${GITHUB_REF##*/}} | tr / -) 
        echo "DESPUES"

        #If we are building main branch, we also tag as latest_snapshot
        if [ $(echo ${GITHUB_REF} | tr / -) == 'robertomonteromiguel-lib_injection_system_tests_integration' ]; then
          DOCKER_IMAGE_NAME_WITH_TAG=${DOCKER_IMAGE_NAME_WITH_TAG},$(echo ${DOCKER_IMAGE_NAME}:latest_snapshot)
        fi

        #If we have the CI_COMMIT_SHA we use it as tag (related with release)
        if [ -n "${{ env.CI_COMMIT_SHA }}" ] ; then
          DOCKER_IMAGE_NAME_WITH_TAG=${DOCKER_IMAGE_NAME_WITH_TAG},$(echo ${DOCKER_IMAGE_NAME}:${{ env.CI_COMMIT_SHA }})
        fi

        echo "Using image name '$DOCKER_IMAGE_NAME_WITH_TAG'"
        echo "::set-output name=image_name::$DOCKER_IMAGE_NAME_WITH_TAG"

    - name: Login to Docker
      run: docker login -u publisher -p ${{ secrets.GITHUB_TOKEN }} ghcr.io

    - name: Docker Build
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: ${{ steps.set_names.outputs.image_name }}
        platforms: "linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/mips64le,linux/arm/v7,linux/arm/v6"
        context: ./lib-injection

  injection-tests:
    needs:
      - build-and-publish-init-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        lib-injection-connection: [ 'network','uds']
        lib-injection-use-admission-controller: ['', 'use-admission-controller']
        weblog-variant: [ 'dd-lib-python-init-test-django','dd-lib-python-init-test-django-gunicorn','dd-lib-python-init-test-django-uvicorn']
      fail-fast: false
    env:
      TEST_LIBRARY: python
      WEBLOG_VARIANT: ${{ matrix.weblog-variant }}
      LIBRARY_INJECTION_CONNECTION: ${{ matrix.lib-injection-connection }}
      LIBRARY_INJECTION_ADMISSION_CONTROLLER: ${{ matrix.lib-injection-use-admission-controller }}
      DOCKER_REGISTRY_IMAGES_PATH: ghcr.io/datadog
      DOCKER_IMAGE_TAG: ${{ github.sha }}
    steps:
 
      - name: Checkout system tests
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # 2.3.4
        with:
          repository: 'DataDog/system-tests'
          ref: 'robertomonteromiguel/lib_injection_integration'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 # 2.0.0
        with:
          install: true
          config-inline: |
              [worker.oci]
                max-parallelism = 1

      - name: Log in to the Container registry
        uses: docker/login-action@v2 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push images
        run: |
          ./lib-injection/run.sh build-and-push-test-app-image  
          ./lib-injection/build.sh
 
      - name: Run lib injection tests
        run: |
          ./lib-injection/run-lib-injection.sh

      - name: Compress lib injection logs
        if: ${{ always() }}
        run: tar -czvf artifact.tar.gz $(ls | grep logs)

      - name: Upload lib injection logs
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: library-injection_python_${{ matrix.weblog-variant }}_${{ matrix.lib-injection-connection }}_${{ matrix.lib-injection-use-admission-controller }}
          path: artifact.tar.gz
