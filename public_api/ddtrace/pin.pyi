import Any
from .tracer import Tracer
from typing import Dict, Optional

log: Any

class Pin:
    app: Any = ...
    tags: Any = ...
    tracer: Any = ...
    def __init__(self, service: Optional[str]=..., app: Optional[str]=..., app_type: Any=..., tags: Optional[Dict[str, str]]=..., tracer: Optional[Tracer]=..., _config: Optional[Dict[str, Any]]=...) -> None: ...
    @property
    def service(self) -> str: ...
    def __setattr__(self, name: Any, value: Any) -> None: ...
    @staticmethod
    def get_from(obj: Any) -> Pin: ...
    @classmethod
    def override(cls, obj: Any, service: Optional[str]=..., app: Optional[str]=..., app_type: Any=..., tags: Optional[Dict[str, str]]=..., tracer: Optional[Tracer]=...) -> None: ...
    def enabled(self) -> bool: ...
    def onto(self, obj: Any, send: builtins.bool=...) -> None: ...
    def remove_from(self, obj: Any) -> None: ...
    def clone(self, service: Optional[str]=..., app: Optional[str]=..., app_type: Any=..., tags: Optional[Dict[str, str]]=..., tracer: Optional[Tracer]=...) -> Pin: ...
