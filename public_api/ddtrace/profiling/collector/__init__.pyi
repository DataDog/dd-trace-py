import Any
import abc
import typing.Iterable[ddtrace.profiling.event.Event]
from .. import event as event
from ddtrace.internal import periodic, service

class CollectorError(Exception): ...
class CollectorUnavailable(CollectorError): ...

class Collector(service.Service, metaclass=abc.ABCMeta):
    recorder: Any = ...
    @staticmethod
    def snapshot() -> None: ...
    def __init__(self, status: Any, service_lock: Any, recorder: Any) -> None: ...
    def __lt__(self, other: _AT`-1) -> Any: ...
    def __le__(self, other: _AT`-1) -> Any: ...
    def __gt__(self, other: _AT`-1) -> Any: ...
    def __ge__(self, other: _AT`-1) -> Any: ...

class PeriodicCollector(Collector, periodic.PeriodicService):
    def periodic(self) -> None: ...
    def collect(self) -> typing.Iterable[typing.Iterable[event.Event]]: ...
    def __init__(self, status: Any, service_lock: Any, recorder: Any, interval: Any, worker: Any) -> None: ...
    def __lt__(self, other: _AT`-1) -> Any: ...
    def __le__(self, other: _AT`-1) -> Any: ...
    def __gt__(self, other: _AT`-1) -> Any: ...
    def __ge__(self, other: _AT`-1) -> Any: ...

class CaptureSampler:
    capture_pct: Any = ...
    def capture_pct_validator(self, attribute: Any, value: Any) -> None: ...
    def capture(self): ...
    def __init__(self, capture_pct: Any, counter: Any) -> None: ...
    def __lt__(self, other: _AT`-1) -> Any: ...
    def __le__(self, other: _AT`-1) -> Any: ...
    def __gt__(self, other: _AT`-1) -> Any: ...
    def __ge__(self, other: _AT`-1) -> Any: ...

class CaptureSamplerCollector(Collector, metaclass=abc.ABCMeta):
    capture_pct: Any = ...
    def __init__(self, status: Any, service_lock: Any, recorder: Any, capture_pct: Any, capture_sampler: Any) -> None: ...
    def __lt__(self, other: _AT`-1) -> Any: ...
    def __le__(self, other: _AT`-1) -> Any: ...
    def __gt__(self, other: _AT`-1) -> Any: ...
    def __ge__(self, other: _AT`-1) -> Any: ...
