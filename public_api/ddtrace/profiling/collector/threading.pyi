import Any
from ddtrace.profiling import collector, event
from ddtrace.vendor import wrapt
from typing import Optional

class LockEventBase(event.StackBasedEvent):
    lock_name: Any = ...
    sampling_pct: Any = ...

class LockAcquireEvent(LockEventBase):
    wait_time_ns: Any = ...

class LockReleaseEvent(LockEventBase):
    locked_for_ns: Any = ...

WRAPT_C_EXT: bool

class FunctionWrapper(wrapt.FunctionWrapper):
    def __get__(self, instance: Any, owner: Optional[Any] = ...): ...

class LockCollector(collector.CaptureSamplerCollector):
    nframes: Any = ...
    tracer: Any = ...
    original: Any = ...
    def patch(self) -> None: ...
    def unpatch(self) -> None: ...
    def __init__(self, status: Any, service_lock: Any, recorder: Any, capture_pct: Any, capture_sampler: Any, nframes: Any, tracer: Any) -> None: ...
    def __lt__(self, other: _AT`-1) -> Any: ...
    def __le__(self, other: _AT`-1) -> Any: ...
    def __gt__(self, other: _AT`-1) -> Any: ...
    def __ge__(self, other: _AT`-1) -> Any: ...
