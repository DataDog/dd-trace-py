from ddtrace.profiling import collector, event
from ddtrace.vendor import wrapt
from typing import Any, Optional

class LockEventBase(event.StackBasedEvent):
    lock_name: Any = ...
    sampling_pct: Any = ...

class LockAcquireEvent(LockEventBase):
    wait_time_ns: Any = ...

class LockReleaseEvent(LockEventBase):
    locked_for_ns: Any = ...

WRAPT_C_EXT: bool

class FunctionWrapper(wrapt.FunctionWrapper):
    def __get__(self, instance: Any, owner: Optional[Any] = ...): ...

class LockCollector(collector.CaptureSamplerCollector):
    nframes: Any = ...
    tracer: Any = ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    original: Any = ...
    def patch(self): ...
    def unpatch(self) -> None: ...
