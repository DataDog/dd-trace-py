import abc
from .context import Context
from .span import Span
from typing import Any, Optional, Union

class BaseContextProvider(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def activate(self, ctx: Optional[Union[Context, Span]]) -> None: ...
    @abc.abstractmethod
    def active(self) -> Optional[Union[Context, Span]]: ...
    def __call__(self, *args: Any, **kwargs: Any): ...

class DefaultContextProvider(BaseContextProvider):
    def __init__(self) -> None: ...
    def activate(self, ctx: Optional[Union[Span, Context]]) -> None: ...
    def active(self) -> Optional[Union[Context, Span]]: ...
