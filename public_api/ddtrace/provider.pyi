import abc
from .context import Context
from typing import Any

class BaseContextProvider(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def activate(self, context: ddtrace.context.Context) -> None: ...
    @abc.abstractmethod
    def active(self) -> Context: ...
    def __call__(self, *args: Any, **kwargs: Any): ...

class DefaultContextProvider(BaseContextProvider):
    def __init__(self) -> None: ...
    def activate(self, ctx: ddtrace.context.Context) -> None: ...
    def active(self) -> Context: ...
