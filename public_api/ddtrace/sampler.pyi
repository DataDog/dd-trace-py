import Any
import abc
from .span import Span
from typing import Dict, List, Optional

log: Any
MAX_TRACE_ID: Any
KNUTH_FACTOR: int

class BaseSampler(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def sample(self, span: Any) -> Any: ...

class BasePrioritySampler(BaseSampler, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def update_rate_by_service_sample_rates(self, sample_rates: Any) -> Any: ...

class AllSampler(BaseSampler):
    def sample(self, span: Span) -> bool: ...

class RateSampler(BaseSampler):
    def __init__(self, sample_rate: float=...) -> None: ...
    sample_rate: Any = ...
    sampling_id_threshold: Any = ...
    def set_sample_rate(self, sample_rate: float) -> None: ...
    def sample(self, span: Span) -> bool: ...

class RateByServiceSampler(BasePrioritySampler):
    sample_rate: Any = ...
    def __init__(self, sample_rate: float=...) -> None: ...
    def set_sample_rate(self, sample_rate: float, service: str=..., env: str=...) -> None: ...
    def sample(self, span: Span) -> bool: ...
    def update_rate_by_service_sample_rates(self, rate_by_service: Dict[str, float]) -> None: ...

class DatadogSampler(BasePrioritySampler):
    NO_RATE_LIMIT: int = ...
    DEFAULT_RATE_LIMIT: int = ...
    rules: Any = ...
    limiter: Any = ...
    default_sampler: ddtrace.sampler.BaseSampler = ...
    def __init__(self, rules: Optional[List[SamplingRule]]=..., default_sample_rate: Optional[float]=..., rate_limit: Optional[int]=...) -> None: ...
    def update_rate_by_service_sample_rates(self, sample_rates: Dict[str, float]) -> None: ...
    def sample(self, span: Span) -> bool: ...

class SamplingRule(BaseSampler):
    NO_RULE: Any = ...
    service: Any = ...
    name: Any = ...
    def __init__(self, sample_rate: float, service: Any=..., name: Any=...) -> None: ...
    @property
    def sample_rate(self) -> float: ...
    @sample_rate.setter
    def sample_rate(self, sample_rate: float) -> None: ...
    def matches(self, span: Span) -> bool: ...
    def sample(self, span: Span) -> bool: ...
