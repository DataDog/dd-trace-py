import Any
from .context import Context
from .internal.writer import TraceWriter
from .provider import DefaultContextProvider
from .sampler import BaseSampler
from .span import Span
from typing import Callable, Dict, Optional

log: Any
debug_mode: Any
DD_LOG_FORMAT: Any

class Tracer:
    SHUTDOWN_TIMEOUT: int = ...
    log: Any = ...
    tags: Any = ...
    enabled: Any = ...
    context_provider: Any = ...
    sampler: ddtrace.sampler.BaseSampler = ...
    priority_sampler: Union[ddtrace.sampler.BasePrioritySampler, None] = ...
    writer: ddtrace.internal.writer.TraceWriter = ...
    def __init__(self, url: Union[builtins.str, None]=..., dogstatsd_url: Union[builtins.str, None]=...) -> None: ...
    def on_start_span(self, func: def (*Any, **Any) -> Any) -> Callable: ...
    def deregister_on_start_span(self, func: def (*Any, **Any) -> Any) -> Callable: ...
    @property
    def debug_logging(self): ...
    @debug_logging.setter
    def debug_logging(self, value: bool) -> None: ...
    def __call__(self) -> Any: ...
    def global_excepthook(self, tp: Any, value: Any, traceback: Any) -> None: ...
    def get_call_context(self, *args: Any, **kwargs: Any) -> Context: ...
    def configure(self, enabled: Optional[bool]=..., hostname: Optional[str]=..., port: Optional[int]=..., uds_path: Optional[str]=..., https: Optional[bool]=..., sampler: Optional[BaseSampler]=..., context_provider: Optional[DefaultContextProvider]=..., wrap_executor: Optional[Callable]=..., priority_sampling: Optional[bool]=..., settings: Optional[Dict[str, Any]]=..., collect_metrics: Optional[bool]=..., dogstatsd_url: Optional[str]=..., writer: Optional[TraceWriter]=..., partial_flush_enabled: Optional[bool]=..., partial_flush_min_spans: Optional[int]=...) -> None: ...
    def start_span(self, name: builtins.str, child_of: Union[ddtrace.span.Span, ddtrace.context.Context, None]=..., service: Union[builtins.str, None]=..., resource: Union[builtins.str, None]=..., span_type: Union[builtins.str, None]=...) -> Span: ...
    def trace(self, name: builtins.str, service: Union[builtins.str, None]=..., resource: Union[builtins.str, None]=..., span_type: Union[builtins.str, None]=...) -> Span: ...
    def current_root_span(self) -> Optional[Span]: ...
    def current_span(self) -> Optional[Span]: ...
    def write(self, spans: Union[builtins.list[ddtrace.span.Span], None]) -> None: ...
    def set_service_info(self, *args: Any, **kwargs: Any) -> None: ...
    def wrap(self, name: Union[builtins.str, None]=..., service: Union[builtins.str, None]=..., resource: Union[builtins.str, None]=..., span_type: Union[builtins.str, None]=...) -> Callable[[Callable[..., Any]], Callable[..., Any]]: ...
    def set_tags(self, tags: builtins.dict[builtins.str, builtins.str]) -> None: ...
    def shutdown(self, timeout: Union[builtins.float, None]=...) -> None: ...
