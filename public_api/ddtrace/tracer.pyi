import Any
from .context import Context
from .internal.writer import TraceWriter
from .provider import DefaultContextProvider
from .sampler import BaseSampler
from .span import Span
from typing import Callable, Dict, List, Optional, TypeVar

log: Any
debug_mode: Any
call_basic_config: Any
DD_LOG_FORMAT: Any
AnyCallable = TypeVar('AnyCallable', bound=Callable)

class Tracer:
    SHUTDOWN_TIMEOUT: int = ...
    log: Any = ...
    tags: Any = ...
    enabled: Any = ...
    context_provider: Any = ...
    sampler: ddtrace.sampler.BaseSampler = ...
    priority_sampler: Union[ddtrace.sampler.BasePrioritySampler, None] = ...
    writer: ddtrace.internal.writer.TraceWriter = ...
    def __init__(self, url: Optional[str]=..., dogstatsd_url: Optional[str]=...) -> None: ...
    def on_start_span(self, func: Callable) -> Callable: ...
    def deregister_on_start_span(self, func: Callable) -> Callable: ...
    @property
    def debug_logging(self): ...
    @debug_logging.setter
    def debug_logging(self, value: bool) -> None: ...
    def __call__(self) -> Any: ...
    def global_excepthook(self, tp: Any, value: Any, traceback: Any) -> None: ...
    def get_call_context(self, *args: Any, **kwargs: Any) -> Context: ...
    def current_trace_context(self, *args: Any, **kwargs: Any): ...
    def configure(self, enabled: Optional[bool]=..., hostname: Optional[str]=..., port: Optional[int]=..., uds_path: Optional[str]=..., https: Optional[bool]=..., sampler: Optional[BaseSampler]=..., context_provider: Optional[DefaultContextProvider]=..., wrap_executor: Optional[Callable]=..., priority_sampling: Optional[bool]=..., settings: Optional[Dict[str, Any]]=..., collect_metrics: Optional[bool]=..., dogstatsd_url: Optional[str]=..., writer: Optional[TraceWriter]=..., partial_flush_enabled: Optional[bool]=..., partial_flush_min_spans: Optional[int]=...) -> None: ...
    start_span: Any = ...
    trace: Any = ...
    def current_root_span(self) -> Optional[Span]: ...
    def current_span(self) -> Optional[Span]: ...
    def write(self, spans: Optional[List[Span]]) -> None: ...
    def set_service_info(self, *args: Any, **kwargs: Any) -> None: ...
    def wrap(self, name: Optional[str]=..., service: Optional[str]=..., resource: Optional[str]=..., span_type: Optional[str]=...) -> Callable[[AnyCallable], AnyCallable]: ...
    def set_tags(self, tags: Dict[str, str]) -> None: ...
    def shutdown(self, timeout: Optional[float]=...) -> None: ...
