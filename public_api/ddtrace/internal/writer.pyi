import Any
import abc
from . import periodic
from ddtrace.vendor.dogstatsd import DogStatsd as DogStatsd
from typing import Optional

log: Any
LOG_ERR_INTERVAL: int
DEFAULT_SMA_WINDOW: int

class Response:
    status: Any = ...
    body: Any = ...
    reason: Any = ...
    msg: Any = ...
    def __init__(self, status: Optional[Any] = ..., body: Optional[Any] = ..., reason: Optional[Any] = ..., msg: Optional[Any] = ...) -> None: ...
    @classmethod
    def from_http_response(cls, resp: Any) -> Any: ...
    def get_json(self): ...

class TraceWriter(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def recreate(self) -> TraceWriter: ...
    @abc.abstractmethod
    def stop(self, timeout: Union[builtins.float, None]=...) -> None: ...
    @abc.abstractmethod
    def write(self, spans: Union[builtins.list[ddtrace.span.Span], None]=...) -> None: ...

class LogWriter(TraceWriter):
    encoder: Any = ...
    out: Any = ...
    def __init__(self, out: typing.TextIO=..., sampler: Union[ddtrace.sampler.BaseSampler, None]=..., priority_sampler: Union[ddtrace.sampler.BasePrioritySampler, None]=...) -> None: ...
    def recreate(self) -> LogWriter: ...
    def stop(self, timeout: Union[builtins.float, None]=...) -> None: ...
    def write(self, spans: Union[builtins.list[ddtrace.span.Span], None]=...) -> None: ...

class AgentWriter(periodic.PeriodicService, TraceWriter):
    agent_url: Any = ...
    dogstatsd: Any = ...
    def __init__(self, agent_url: builtins.str, sampler: Union[ddtrace.sampler.BaseSampler, None]=..., priority_sampler: Union[ddtrace.sampler.BasePrioritySampler, None]=..., processing_interval: builtins.float=..., buffer_size: builtins.int=..., max_payload_size: builtins.int=..., timeout: builtins.float=..., dogstatsd: Union[Any, None]=..., report_metrics: builtins.bool=..., sync_mode: builtins.bool=...) -> None: ...
    def recreate(self) -> AgentWriter: ...
    def write(self, spans: Union[builtins.list[ddtrace.span.Span], None]=...) -> None: ...
    def flush_queue(self, raise_exc: builtins.bool=...) -> None: ...
    def periodic(self) -> None: ...
    def stop(self, timeout: Union[builtins.float, None]=...) -> None: ...
    on_shutdown: Any = ...
