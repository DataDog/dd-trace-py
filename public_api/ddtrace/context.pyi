import Any
from ddtrace import Span
from typing import Optional

log: Any

class Context:
    dd_origin: Any = ...
    def __init__(self, trace_id: Union[builtins.int, None]=..., span_id: Union[builtins.int, None]=..., sampling_priority: Union[builtins.int, None]=..., dd_origin: Union[builtins.str, None]=...) -> None: ...
    @property
    def trace_id(self) -> Any: ...
    @property
    def span_id(self) -> Any: ...
    @property
    def sampling_priority(self): ...
    @sampling_priority.setter
    def sampling_priority(self, value: int) -> None: ...
    def clone(self) -> Context: ...
    def get_current_root_span(self) -> Optional[Span]: ...
    def get_current_span(self) -> Optional[Span]: ...
    def add_span(self, span: ddtrace.span.Span) -> None: ...
    def close_span(self, span: ddtrace.span.Span) -> None: ...
