from ddtrace.vendor.wrapt import ObjectProxy
from typing import Any, Optional

log: Any

class TracedMongoClient(ObjectProxy):
    def __init__(self, client: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def __setddpin__(self, pin: Any) -> None: ...
    def __getddpin__(self): ...

class TracedTopology(ObjectProxy):
    def __init__(self, topology: Any) -> None: ...
    def select_server(self, *args: Any, **kwargs: Any): ...

class TracedServer(ObjectProxy):
    def __init__(self, server: Any) -> None: ...
    def run_operation_with_response(self, sock_info: Any, operation: Any, *args: Any, **kwargs: Any): ...
    def send_message_with_response(self, operation: Any, *args: Any, **kwargs: Any): ...
    def get_socket(self, *args: Any, **kwargs: Any) -> None: ...

class TracedSocket(ObjectProxy):
    def __init__(self, socket: Any) -> None: ...
    def command(self, dbname: Any, spec: Any, *args: Any, **kwargs: Any): ...
    def write_command(self, request_id: Any, msg: Any): ...

def normalize_filter(f: Optional[Any] = ...): ...
def set_address_tags(span: Any, address: Any) -> None: ...
