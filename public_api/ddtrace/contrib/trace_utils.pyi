import ddtrace.utils.wrappers
from ddtrace import Span, Tracer
from typing import Any, Callable, Dict, Iterator, Optional, Tuple

log: Any
wrap: Any
unwrap = ddtrace.utils.wrappers.unwrap
iswrapped = ddtrace.utils.wrappers.iswrapped
REQUEST: str
RESPONSE: str
NORMALIZE_PATTERN: Any

def with_traced_module(func: Any): ...
def int_service(pin: Any, int_config: Any, default: Optional[Any] = ...): ...
def ext_service(pin: Any, int_config: Any, default: Optional[Any] = ...): ...
def set_http_meta(span: Any, integration_config: Any, method: Optional[Any] = ..., url: Optional[Any] = ..., status_code: Optional[Any] = ..., status_msg: Optional[Any] = ..., query: Optional[Any] = ..., request_headers: Optional[Any] = ..., response_headers: Optional[Any] = ..., retries_remain: Optional[Any] = ...) -> None: ...
def activate_distributed_headers(tracer: Tracer, int_config: Optional[Dict[str, Any]]=..., request_headers: Optional[Dict[str, str]]=..., override: Optional[bool]=...) -> None: ...
def set_flattened_tags(span: Span, items: Iterator[Tuple[str, Any]], sep: str=..., exclude_policy: Optional[Callable[[str], bool]]=..., processor: Any=...) -> None: ...
