from ddtrace.contrib import dbapi
from ddtrace.vendor import wrapt
from typing import Any, Optional

PSYCOPG2_VERSION: Any

def patch() -> None: ...
def unpatch() -> None: ...

class Psycopg2TracedCursor(dbapi.TracedCursor): ...
class Psycopg2FetchTracedCursor(Psycopg2TracedCursor, dbapi.FetchTracedCursor): ...

class Psycopg2TracedConnection(dbapi.TracedConnection):
    def __init__(self, conn: Any, pin: Optional[Any] = ..., cursor_cls: Optional[Any] = ...) -> None: ...

def patch_conn(conn: Any, traced_conn_cls: Any = ...): ...
def patched_connect(connect_func: Any, _: Any, args: Any, kwargs: Any): ...

class AdapterWrapper(wrapt.ObjectProxy):
    def prepare(self, *args: Any, **kwargs: Any): ...
