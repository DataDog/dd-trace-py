import Any
import asyncio
from ddtrace.vendor import wrapt
from typing import Optional

class AIOTracedCursor(wrapt.ObjectProxy):
    def __init__(self, cursor: Any, pin: Any) -> None: ...
    @asyncio.coroutine
    def executemany(self, query: Any, *args: Any, **kwargs: Any) -> Any: ...
    @asyncio.coroutine
    def execute(self, query: Any, *args: Any, **kwargs: Any) -> Any: ...
    @asyncio.coroutine
    def callproc(self, proc: Any, args: Any) -> Any: ...
    def __aiter__(self): ...

class AIOTracedConnection(wrapt.ObjectProxy):
    def __init__(self, conn: Any, pin: Optional[Any] = ..., cursor_cls: Any = ...) -> None: ...
    def cursor(self, *args: Any, **kwargs: Any): ...
