import Any
from typing import Dict, Optional, Text, Union

log: Any

class Span:
    name: Any = ...
    service: Any = ...
    resource: Any = ...
    meta: builtins.dict[Union[builtins.str, builtins.bytes], builtins.str] = ...
    error: int = ...
    metrics: builtins.dict[builtins.str, Any] = ...
    start_ns: Any = ...
    duration_ns: Union[builtins.int, None] = ...
    trace_id: builtins.int = ...
    span_id: builtins.int = ...
    parent_id: Union[builtins.int, None] = ...
    tracer: Any = ...
    sampled: builtins.bool = ...
    def __init__(self, tracer: Union[ddtrace.tracer.Tracer, None], name: builtins.str, service: Union[builtins.str, None]=..., resource: Union[builtins.str, None]=..., span_type: Union[builtins.str, None]=..., trace_id: Union[builtins.int, None]=..., span_id: Union[builtins.int, None]=..., parent_id: Union[builtins.int, None]=..., start: Union[builtins.int, None]=..., context: Union[ddtrace.context.Context, None]=..., on_finish: Union[builtins.list[def (ddtrace.span.Span)], None]=..., _check_pid: builtins.bool=...) -> None: ...
    @property
    def start(self) -> float: ...
    @start.setter
    def start(self, value: Union[int, float]) -> None: ...
    @property
    def span_type(self): ...
    @span_type.setter
    def span_type(self, value: Any) -> None: ...
    @property
    def finished(self) -> bool: ...
    @finished.setter
    def finished(self, value: bool) -> None: ...
    @property
    def duration(self) -> Optional[float]: ...
    @duration.setter
    def duration(self, value: float) -> None: ...
    def finish(self, finish_time: Union[builtins.int, None]=...) -> None: ...
    def set_tag(self, key: Union[builtins.str, builtins.bytes], value: Union[Any, None]=...) -> None: ...
    def get_tag(self, key: Union[builtins.str, builtins.bytes]) -> Optional[Text]: ...
    def set_tags(self, tags: builtins.dict[Union[builtins.str, builtins.bytes], builtins.str]) -> None: ...
    def set_meta(self, k: Union[builtins.str, builtins.bytes], v: builtins.str) -> None: ...
    def set_metas(self, kvs: builtins.dict[Union[builtins.str, builtins.bytes], builtins.str]) -> None: ...
    def set_metric(self, key: builtins.str, value: Any) -> None: ...
    def set_metrics(self, metrics: builtins.dict[builtins.str, Any]) -> None: ...
    def get_metric(self, key: builtins.str) -> Any: ...
    def to_dict(self) -> Dict[str, Any]: ...
    def set_traceback(self, limit: builtins.int=...) -> None: ...
    def set_exc_info(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    def pprint(self) -> str: ...
    @property
    def context(self) -> Any: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
