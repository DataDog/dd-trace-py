#!/usr/bin/env bash
PR_NUMBER="${1}"
shift 1
TO_BRANCHES="$@"

if ! which gh &>/dev/null;
then
   echo "gh cli tool is required in order to continue"
   echo "MacOS install via: brew install gh"
   echo "https://github.com/cli/cli#installation"
   exit 1
fi

if ! which jq &>/dev/null;
then
   echo "jq tool is required in order to continue"
   echo "MacOS install via: brew install jq"
   echo "https://stedolan.github.io/jq/"
   exit 1
fi

# Download data about the PR
pr_data="$(gh pr view --json "state,title,mergeCommit,author,labels,body" ${PR_NUMBER})"

# Verify that we are going to have a merge commit
if "$(echo "${pr_data}" | jq -e '.state != "MERGED"')";
then
    echo "PR ${PR_NUMBER} has not been merged yet"
    exit 1
fi

# Extract data from the original PR
merge_commit_sha="$(echo "${pr_data}" | jq -r '.mergeCommit.oid')"
original_title="$(echo "${pr_data}" | jq -r '.title')"
original_body="$(echo "${pr_data}" | jq -r '.body')"
original_author="$(echo "${pr_data}" | jq -r '.author.login')"
original_labels="$(echo "${pr_data}" | jq -r '[.labels[].name] | join(",")')"

# Get the current branch so we can switch back to it when we are done
current_branch="$(git rev-parse --abbrev-ref HEAD)"

git fetch &>/dev/null

for base_branch in "$@";
do
  echo "Backporting ${PR_NUMBER} (sha: ${merge_commit_sha}) to ${base_branch}"
  branch_name="test-backport-${PR_NUMBER}-to-${base_branch}"
  git switch --detach "origin/${base_branch}"
  git switch -c "${branch_name}"

  echo "Cherry-picking ${merge_commit_sha} (git commit signing required here)"
  if ! git cherry-pick -x "${merge_commit_sha}";
  then
      git cherry-pick --abort
      echo "Cherry-pick failed, exiting"
      exit 1
  fi
  echo "Pushing branch ${branch_name}"
  git push --set-upstream origin "${branch_name}"

  echo "Creating pull request"
  IFS='' read -r -d '' new_body <<EOF
  Backport of #${PR_NUMBER} to ${base_branch}

  ${original_body}
EOF
  new_title="${original_title} [backport #${PR_NUMBER} to ${base_branch}]"
  gh pr create --base "${base_branch}" --title "${new_title}" --body "${new_body}" --assignee "@me,${original_author}" --label "${original_labels}"

  echo "Enabling auto-merge on PR"
  gh pr merge --auto "${branch_name}"

  echo "Opening PR in the browser for review"
  gh pr view --web "${branch_name}"

  # Back to the original branch and delete the temporary branch
  git switch "${current_branch}"
  git branch -D "${branch_name}"
done


# Everything is successful, go back to where they were before
git switch "${current_branch}"
