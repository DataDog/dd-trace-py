This folder (scripts/iast/) contains some scripts to check memory usage of native code.

## How to use

### 1. Build the docker image

```sh
docker build . -f docker/Dockerfile_py311_debug_mode -t python_311_debug
```

### 2. Run the docker container

#### 2.1. Run the container with the script to find references  (this script will run the memory usage check)

```sh
docker run --rm -it -v ${PWD}:/ddtrace python_311_debug /bin/bash -c "cd /ddtrace && source scripts/iast/.env && \
sh scripts/iast/run_references.sh"
>> References: 1003
>> References: 2
>> References: 2
>> References: 2
>> References: 2
>> References: 2
```

#### 2.2. Run the container with the script with memray usage check

```sh
docker run --rm -it -v ${PWD}:/ddtrace python_311_debug /bin/bash -c "cd /ddtrace && source scripts/iast/.env && \
sh scripts/iast/run_memray.sh"
google-chrome file://$PWD/memray-flamegraph-lel.html
```

#### 2.3. Run the container with the script with Max RSS

```sh
docker run --rm -it -v ${PWD}:/ddtrace python_311_debug /bin/bash -c "cd /ddtrace && source scripts/iast/.env && \
sh scripts/iast/run_memory.sh"
>> Round 0 Max RSS: 41.9453125
>> 42.2109375
```

#### 2.4. Run the container with valgrind

- `--tool`: default: memcheck, other options: cachegrind, callgrind, helgrind, drd, massif, dhat, lackey, none, exp-bbv
  - memcheck:
    - `--leak-check`: options summary/full/yes
  - massif: heap profiler, see below
- `--track-origins`: increases the size of the basic block translations
- `--suppressions`: path to our suppression file: `scripts/iast/valgrind-python.supp`
- `--log-file`: Valgrind report a lot information, we store this info in a file to analyze carefully the reports

docker run --rm -it -v ${PWD}:/ddtrace python_311_debug /bin/bash -c "cd /ddtrace && source scripts/iast/.env && \
valgrind --tool=memcheck --leak-check=full  --log-file=scripts/iast/valgrind_bench_overload.out --track-origins=yes \
--suppressions=scripts/iast/valgrind-python.supp  --show-leak-kinds=all \
python3.11 scripts/iast/test_leak_functions.py 100"

##### Understanding results of memcheck

Valgrind Memcheck returns all traces of C and C++ files. Most of them are Python core traces. These traces could be
memory leaks in our Python code, but we can't interpret them at the moment. Therefore, all of them are in the
 suppression file.


The valid traces of our C files, are like that:
```
==324555== 336 bytes in 1 blocks are possibly lost in loss record 4,806 of 5,852
==324555==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==324555==    by 0x40149CA: allocate_dtv (dl-tls.c:286)
==324555==    by 0x40149CA: _dl_allocate_tls (dl-tls.c:532)
==324555==    by 0x486E322: allocate_stack (allocatestack.c:622)
==324555==    by 0x486E322: pthread_create@@GLIBC_2.2.5 (pthread_create.c:660)
==324555==    by 0xFBF078E: ??? (in /root/ddtrace/native-core.so)
==324555==    by 0x19D312C7: ???
==324555==    by 0x1FFEFEFAFF: ???
==324555==
```
