testagent_image: &testagent_image ghcr.io/datadog/dd-apm-test-agent/ddapm-test-agent:v1.17.0

variables:
  RIOT_RUN_CMD: riot -P -v run --exitfirst --pass-env -s

.test_base_hatch:
  extends: .testrunner
  stage: tests
  # Hatch doesn't use pre-built wheels or venvs so we can start them right away
  needs: []
  parallel: 4
  script:
    - hatch env show --json | jq -r --arg suite_name "$SUITE_NAME" 'keys[] | select(. | contains($suite_name))' | sort | ./.gitlab/ci-split-input.sh | xargs -n 1 -I {} hatch run {}:test

.test_base_riot:
  extends: .testrunner
  stage: tests
  needs: [ build_base_venvs ]
  parallel: 4
  steps:
    - name: "start services"
      step: start_services
    - name: "tests"
      script:
        - pip install riot~=0.19.1
        - unset DD_SERVICE
        - unset DD_ENV
        - unset DD_TAGS
        - unset DD_TRACE_REMOVE_INTEGRATION_SERVICE_NAMES_ENABLED
        - |
          hashes=( $(riot list --hash-only "${SUITE_NAME}" | sort | ./.gitlab/ci-split-input.sh) )
          for hash in "${hashes[@]}"
          do
            echo "Running riot hash: ${hash}"
            riot list "${hash}"
            ${RIOT_RUN_CMD} "${hash}"
          done

start_services:
  description: "Start services"
  parameters:
    env:
      type: string
      default: ""
    services:
      type: string
      default: ""
  steps:
    # Retry pulls in case they fail
    - run: for i in {1..3}; do docker-compose pull -q << parameters.services >> && break || sleep 3; done
    - run: << parameters.env >> docker-compose up -d << parameters.services >>
    - run:
        command: docker-compose logs -f
        background: true

include:
  - local: ".gitlab/tests/appsec.yml"
  - local: ".gitlab/tests/tracer.yml"
  - local: ".gitlab/tests/core.yml"
