variables:
  RIOT_RUN_CMD: riot -P -v run --exitfirst --pass-env -s
  LOG_LEVEL: DEBUG
  SNAPSHOT_DIR: /snapshots
  PORT: 9126
  SNAPSHOT_CI: 1
  DD_POOL_TRACE_CHECK_FAILURES: true
  DD_DISABLE_ERROR_RESPONSES: true
  ENABLED_CHECKS: trace_content_length,trace_stall,meta_tracer_version_header,trace_count_header,trace_peer_service,trace_dd_service
  DD_HOSTNAME: github-actions-worker
  DD_BIND_HOST: 0.0.0.0
  DD_REMOTE_CONFIGURATION_ENABLED: true
  DD_SITE: ${DD_SITE-datadoghq.com}
  DD_API_KEY: ${DD_API_KEY-invalid_but_this_is_fine}
  DD_REMOTE_CONFIGURATION_KEY: ${DD_REMOTE_CONFIGURATION_KEY-invalid_but_this_is_fine}
  DD_REMOTE_CONFIGURATION_REFRESH_INTERVAL: 5s
  DD_APM_RECEIVER_SOCKET: /tmp/ddagent/trace.sock
  DD_DOGSTATSD_NON_LOCAL_TRAFFIC: true

.test_base_hatch:
  extends: .testrunner
  stage: tests
  # Hatch doesn't use pre-built wheels or venvs so we can start them right away
  needs: []
  parallel: 4
  script:
    - hatch env show --json | jq -r --arg suite_name "$SUITE_NAME" 'keys[] | select(. | contains($suite_name))' | sort | ./.gitlab/ci-split-input.sh | xargs -n 1 -I {} hatch run {}:test

.test_base_riot:
  extends: .testrunner
  stage: tests
  needs: [ build_base_venvs ]
  parallel: 4
  services:
    - datadog/agent:latest
    - ghcr.io/datadog/dd-apm-test-agent/ddapm-test-agent:v1.17.0
  script:
    - pip install riot~=0.19.1
    - unset DD_SERVICE
    - unset DD_ENV
    - unset DD_TAGS
    - unset DD_TRACE_REMOVE_INTEGRATION_SERVICE_NAMES_ENABLED
    - |
      hashes=( $(riot list --hash-only "${SUITE_NAME}" | sort | ./.gitlab/ci-split-input.sh) )
      for hash in "${hashes[@]}"
      do
        echo "Running riot hash: ${hash}"
        riot list "${hash}"
        ${RIOT_RUN_CMD} "${hash}"
      done

include:
  - local: ".gitlab/tests/appsec.yml"
  - local: ".gitlab/tests/tracer.yml"
  - local: ".gitlab/tests/core.yml"
