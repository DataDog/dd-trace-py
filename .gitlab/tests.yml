variables:
  RIOT_RUN_CMD: riot -P -v run --exitfirst --pass-env -s

.test_base_hatch:
  extends: .testrunner
  stage: tests
  # Hatch doesn't use pre-built wheels or venvs so we can start them right away
  needs: []
  parallel: 4
  script:
    - |
      envs=( $(hatch env show --json | jq -r --arg suite_name "$SUITE_NAME" 'keys[] | select(. | contains($suite_name))' | sort | ./.gitlab/ci-split-input.sh) )
      for env in "${envs[@]}"
      do
        echo "Running hatch env: ${env}:test"
        hatch run ${env}:test
      done

.test_base_riot:
  extends: .testrunner
  stage: tests
  needs: [ build_base_venvs ]
  parallel: 4
  services:
    - !reference [.services, ddagent]
  script:
    - pip install riot==0.20.0
    - unset DD_SERVICE
    - unset DD_ENV
    - unset DD_TAGS
    - unset DD_TRACE_REMOVE_INTEGRATION_SERVICE_NAMES_ENABLED
    - |
      hashes=( $(riot list --hash-only "${SUITE_NAME}" | sort | ./.gitlab/ci-split-input.sh) )
      for hash in "${hashes[@]}"
      do
        echo "Running riot hash: ${hash}"
        riot list "${hash}"
        ${RIOT_RUN_CMD} "${hash}"
      done

.test_base_riot_snapshot:
  extends: .test_base_riot
  services:
    - !reference [.test_base_riot, services]
    - !reference [.services, testagent]
  before_script:
    - !reference [.testrunner, before_script]
    # DEV: All job variables get shared with services, setting `DD_TRACE_AGENT_URL` on the testagent will tell it to forward all requests to the
    # agent at that host. Therefore setting this as a variable will cause recursive requests to the testagent
    - export DD_TRACE_AGENT_URL="http://testagent:9126"

include:
  - local: ".gitlab/tests/appsec.yml"
  - local: ".gitlab/tests/contrib.yml"
  - local: ".gitlab/tests/core.yml"
  - local: ".gitlab/tests/debugging.yml"
  - local: ".gitlab/tests/llmobs.yml"
  - local: ".gitlab/tests/tracer.yml"
  - local: ".gitlab/tests/profiling.yml"
