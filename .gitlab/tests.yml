stages:
  - precheck
  - riot
  - hatch

variables:
  RIOT_RUN_CMD: riot -P -v run --exitfirst --pass-env -s
  REPO_LANG: python # "python" is used everywhere rather than "py"
  PYTEST_ADDOPTS: "-s"
  # CI_DEBUG_SERVICES: "true"

include:
  - local: ".gitlab/services.yml"
  - local: ".gitlab/testrunner.yml"

.test_base_hatch:
  extends: .testrunner
  stage: hatch
  # Hatch doesn't use pre-built wheels or venvs so we can start them right away
  needs: []
  parallel: 4
  # DEV: This is the max retries that GitLab currently allows for
  retry: 2
  before_script:
    - !reference [.testrunner, before_script]
    - pip install riot==0.20.1
  script:
    - export PYTEST_ADDOPTS="${PYTEST_ADDOPTS} --ddtrace"
    - export _DD_CIVISIBILITY_USE_CI_CONTEXT_PROVIDER=true
    - |
      envs=( $(hatch env show --json | jq -r --arg suite_name "$SUITE_NAME" 'keys[] | select(. | contains($suite_name))' | sort | ./.gitlab/ci-split-input.sh) )
      if [[ ${#envs[@]} -eq 0 ]]; then
        echo "No hatch envs found for ${SUITE_NAME}"
        exit 1
      fi
      for env in "${envs[@]}"
      do
        echo "Running hatch env: ${env}:test"
        hatch run ${env}:test
      done


.test_base_hatch_snapshot:
  extends: .test_base_hatch
  services:
    - !reference [.services, testagent]
  before_script:
    - !reference [.test_base_hatch, before_script]
    # DEV: All job variables get shared with services, setting `DD_TRACE_AGENT_URL` on the testagent will tell it to forward all requests to the
    # agent at that host. Therefore setting this as a variable will cause recursive requests to the testagent
    - export DD_TRACE_AGENT_URL="http://testagent:9126"


build_base_venvs:
  extends: .testrunner
  stage: riot
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
  variables:
    CMAKE_BUILD_PARALLEL_LEVEL: '12'
    PIP_VERBOSE: '1'
    DD_PROFILING_NATIVE_TESTS: '1'
    DD_USE_SCCACHE: '1'
    PIP_CACHE_DIR: '${CI_PROJECT_DIR}/.cache/pip'
    SCCACHE_PATH: '${CI_PROJECT_DIR}/.cache/sccache'
  script: |
    if [ ! -f cache_used.txt ];
    then
      echo "No cache found, building native extensions and base venv"
      apt update && apt install -y sccache
      pip install riot==0.20.1
      riot -P -v generate --python=$PYTHON_VERSION
      touch cache_used.txt
    else
      echo "Skipping build, using compiled files/venv from cache"
      echo "Recreating ddtrace/_version.py with correct version"
      pip install "setuptools_scm[toml]>=4"
      python -m setuptools_scm --force-write-version-files
    fi
  cache:
    - key: build_base_venvs_${PYTHON_VERSION}
      paths:
        - .cache/
    - key:
        prefix: build_base_venvs_${PYTHON_VERSION}
        files:
          # Comes from "hash native sources" job
          - native_sources.sha256sum
      paths:
        - .riot/venv_*
        - ddtrace/**/*.so*
        - ddtrace/internal/datadog/profiling/crashtracker/crashtracker_exe*
        - ddtrace/internal/datadog/profiling/test/test_*
        - cache_used.txt
  artifacts:
    name: venv_$PYTHON_VERSION
    paths:
      - .riot/venv_*
      - ddtrace/_version.py
      - ddtrace/**/*.so*
      - ddtrace/internal/datadog/profiling/crashtracker/crashtracker_exe*
      - ddtrace/internal/datadog/profiling/test/test_*

# Do not define a `needs:` in order to depend on the whole `precheck` stage
.test_base_riot:
  extends: .testrunner
  stage: riot
  needs: [ build_base_venvs ]
  parallel: 4
  services:
    - !reference [.services, ddagent]
  # DEV: This is the max retries that GitLab currently allows for
  retry: 2
  before_script:
    - !reference [.testrunner, before_script]
    - pip install riot==0.20.1
    - unset DD_SERVICE
    - unset DD_ENV
    - unset DD_TAGS
    - unset DD_TRACE_REMOVE_INTEGRATION_SERVICE_NAMES_ENABLED
  script:
    - |
      hashes=( $(riot list --hash-only "${SUITE_NAME}" | sort | ./.gitlab/ci-split-input.sh) )
      if [[ ${#hashes[@]} -eq 0 ]]; then
        echo "No riot hashes found for ${SUITE_NAME}"
        exit 1
      fi
      for hash in "${hashes[@]}"
      do
        echo "Running riot hash: ${hash}"
        riot list "${hash}"
        ${RIOT_RUN_CMD} "${hash}" -- --ddtrace
      done
      ./scripts/check-diff ".riot/requirements/" \
        "Changes detected after running riot. Consider deleting changed files, running scripts/compile-and-prune-test-requirements and committing the result."


.test_base_riot_snapshot:
  extends: .test_base_riot
  services:
    - !reference [.test_base_riot, services]
    - !reference [.services, testagent]
  before_script:
    - !reference [.test_base_riot, before_script]
    # DEV: All job variables get shared with services, setting `DD_TRACE_AGENT_URL` on the testagent will tell it to forward all requests to the
    # agent at that host. Therefore setting this as a variable will cause recursive requests to the testagent
    - export DD_TRACE_AGENT_URL="http://testagent:9126"
    - ln -s "${CI_PROJECT_DIR}" "/root/project"


"hash native sources":
  extends: .testrunner
  stage: precheck
  script: >
     find ddtrace src setup.py pyproject.toml
     -name '*.c'
     -or -name '*.cpp'
     -or -name '*.pyx'
     -or -name '*.h'
     -or -name 'CMakeLists.txt'
     -or -name 'Cargo.lock'
     -or -name '*.rs'
     -or -name 'setup.py'
     -or -name 'pyproject.toml' |
     sort |
     xargs sha256sum > native_sources.sha256sum
  artifacts:
    paths:
      - 'native_sources.sha256sum'

example:
  extends: .testrunner
  stage: riot
  needs: [ "build_base_venvs" ]
  script: >
    source .riot/venv_py3128/bin/activate
    pip freeze
    python -c "import ddtrace; print(ddtrace.__version__)"


# Required jobs will appear here
