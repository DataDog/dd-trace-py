include:
  - .gitlab/testrunner.yml

variables:
  PYPA_IMAGE_BASE: registry.ddbuild.io/images/mirror/pypa
  PYPA_IMAGE_TAG: 2025-04-12-5990e2d
  PYPA_DEFAULT_IMAGE: "${PYPA_IMAGE_BASE}/manylinux2014_x86_64:${PYPA_IMAGE_TAG}"

.python_tags: &python_tags
  - "cp38-cp38"
  - "cp39-cp39"
  - "cp310-cp310"
  - "cp311-cp311"
  - "cp312-cp312"
  - "cp313-cp313"

.linux_platforms: &linux_platforms
  - "manylinux2014"
  - "musllinux_1_2"

.setup_rust:
  - |
    # Setup rust
    echo -e "\e[0Ksection_start:`date +%s`:setup_rust[collapsed=true]\r\e[0KSetup rust"
    if [ "$ARCH" == "i686" ] && [ "$PLATFORM" == "musllinux_1_2" ];
    then
      apk add --no-cache gcc libgcc libstdc++ llvm15-libs musl musl-dev rust-stdlib
      apk add --no-cache rust cargo
    else
      curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y
    fi
    export PATH=$CARGO_HOME/bin:$PATH
    rustc --version
    echo -e "\e[0Ksection_end:`date +%s`:setup_rust\r\e[0K"

.setup_python:
    - |
      # Setup python
      echo -e "\e[0Ksection_start:`date +%s`:setup_python[collapsed=true]\r\e[0KSetup python"
      mkdir -p "${PIP_CACHE_DIR}"
      chown -R "$(id -u):$(id -g)" "${PIP_CACHE_DIR}"
      manylinux-interpreters ensure "${PYTHON_TAG}"
      /opt/python/${PYTHON_TAG}/bin/python -m pip install -U pip==25.0.1 twine==6.1.0 build==1.2.2 packaging==24.2
      /opt/python/${PYTHON_TAG}/bin/python --version
      /opt/python/${PYTHON_TAG}/bin/python -m pip --version
      /opt/python/${PYTHON_TAG}/bin/python -m pip cache info
      /opt/python/${PYTHON_TAG}/bin/python -m pip freeze
      echo -e "\e[0Ksection_end:`date +%s`:setup_python\r\e[0K"

.build_ddtrace_base:
  stage: package
  image: ${PYPA_DEFAULT_IMAGE}
  tags: [ "arch:amd64" ]
  timeout: 10m
  variables:
    KUBERNETES_CPU_REQUEST: 6
    KUBERNETES_MEMORY_REQUEST: 4Gi
    KUBERNETES_MEMORY_LIMIT: 8Gi
    CMAKE_BUILD_PARALLEL_LEVEL: 12
    CARGO_BUILD_JOBS: 12
    SYSTEM_VERSION_COMPAT: 0
    PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip
    CARGO_HOME: ${CI_PROJECT_DIR}/.cache/cargo
    PIP_LOG: "${CI_PROJECT_DIR}/wheelhouse-debug/${CI_JOB_NAME_SLUG}.pip_debug.log"
    PIP_DISABLE_PIP_VERSION_CHECK: 1
    _DD_DEBUG_EXT: "1"
    _DD_DEBUG_EXT_LOG: "${CI_PROJECT_DIR}/wheelhouse-debug/${CI_JOB_NAME_SLUG}.debug_ext_metadata.log"
  cache:
    - key: v0-${CI_JOB_NAME_SLUG}-cache
      paths:
        - .cache/
    - key: v0-${CI_JOB_NAME_SLUG}-build
      paths:
        - src/native/target/

"build ddtrace sdist":
  stage: package
  image: ${PYPA_DEFAULT_IMAGE}
  tags: [ "arch:amd64" ]
  variables:
    PYTHON_TAG: cp313-cp313
    PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip
    CARGO_HOME: ${CI_PROJECT_DIR}/.cache/cargo
  cache:
    key: v0-${CI_JOB_NAME_SLUG}-cache
    paths:
      - .cache/
  script:
    - !reference [ .setup_rust ]
    - !reference [ .setup_python ]
    - /opt/python/${PYTHON_TAG}/bin/python -m build . --sdist --outdir wheelhouse/
    - /opt/python/${PYTHON_TAG}/bin/python -m twine check --strict wheelhouse/*
  artifacts:
    name: ddtrace-sdist
    paths:
      - wheelhouse/

"build ddtrace linux x86_64":
  extends: .build_ddtrace_base
  image: "${PYPA_IMAGE_BASE}/${PLATFORM}_${ARCH}:${PYPA_IMAGE_TAG}"
  tags: [ "arch:amd64" ]
  parallel:
    matrix:
      - PLATFORM: *linux_platforms
        PYTHON_TAG: *python_tags
  variables:
    ARCH: "x86_64"
  before_script:
    - !reference [ .setup_rust ]
    - !reference [ .setup_python ]
  script:
    - |
      # Build the wheel
      echo -e "\e[0Ksection_start:`date +%s`:build_wheel[collapsed=true]\r\e[0KBuild ddtrace wheel"
      echo "pip debug log: ${PIP_LOG}"
      echo "------ DDTRACE STARTING PIP WHEEL BUILD ------" >> "${PIP_LOG}"
      /opt/python/${PYTHON_TAG}/bin/python -m pip wheel "${CI_PROJECT_DIR}" --debug --no-deps --wheel-dir wheelhouse/
      /opt/python/${PYTHON_TAG}/bin/python -m twine check --strict wheelhouse/*
      echo -e "\e[0Ksection_end:`date +%s`:build_wheel\r\e[0K"
    - |
      #Repair the wheel
      echo -e "\e[0Ksection_start:`date +%s`:repair_wheel[collapsed=true]\r\e[0KRepair ddtrace wheel"
      ./.gitlab/repair_wheel_linux.sh wheelhouse/
      echo -e "\e[0Ksection_end:`date +%s`:repair_wheel\r\e[0K"
    - |
      # Download wheel dependencies (x86_64 and aarch64)
      echo -e "\e[0Ksection_start:`date +%s`:download_wheel_dependencies[collapsed=true]\r\e[0KDownload wheel dependencies"
      if [ "$ARCH" == "x86_64" ] || [ "$ARCH" == "aarch64" ];
      then
        .gitlab/download-dependency-wheels.sh "/opt/python/${PYTHON_TAG}/bin/python" "${ARCH}" "${PLATFORM}"
      fi

      # Remove ddtrace from the pip cache so it doesn't get uploaded to the gitlab cache
      /opt/python/${PYTHON_TAG}/bin/python -m pip cache remove ddtrace
      echo -e "\e[0Ksection_end:`date +%s`:download_wheel_dependencies\r\e[0K"
  artifacts:
    name: wheelhouse-${PYTHON_TAG}-${PLATFORM}_${ARCH}
    when: always
    paths:
      - wheelhouse/
      - wheelhouse-dep/
      - wheelhouse-debug/

"build ddtrace linux aarch64":
  extends: "build ddtrace linux x86_64"
  image: "${PYPA_IMAGE_BASE}/${PLATFORM}_${ARCH}:${PYPA_IMAGE_TAG}"
  tags: [ "arch:arm64" ]
  parallel:
    matrix:
      - PLATFORM: *linux_platforms
        PYTHON_TAG: *python_tags
  variables:
    ARCH: "aarch64"

"build ddtrace linux i686":
  extends: .build_ddtrace_base
  image: !reference [ .testrunner, image ]
  tags: [ "docker-in-docker:amd64" ]
  parallel:
    matrix:
      - PLATFORM: *linux_platforms
        PYTHON_TAG: *python_tags
  variables:
    ARCH: "i686"
    IMAGE: "ghcr.io/datadog/dd-trace-py/pypa_${PLATFORM}_${ARCH}:latest"
  script:
    - |
      # Install docker-client
      echo -e "\e[0Ksection_start:`date +%s`:install_docker[collapsed=true]\r\e[0KInstall docker-client"
      apt-get update && apt-get install -y --no-install-recommends docker.io
      docker --version
      echo -e "\e[0Ksection_end:`date +%s`:install_docker\r\e[0K"
    - |
      # Build the wheel
      echo -e "\e[0Ksection_start:`date +%s`:build_wheel[collapsed=true]\r\e[0KBuild ddtrace wheel"
      docker run --rm --platform "linux/386" -v "$(pwd):/project" -w "/project" "${IMAGE}" /bin/bash -c " \
        /opt/python/${PYTHON_TAG}/bin/python -m pip wheel "${CI_PROJECT_DIR}" --no-deps --wheel-dir wheelhouse/ \
        /opt/python/${PYTHON_TAG}/bin/python -m twine check --strict wheelhouse/*"
      echo -e "\e[0Ksection_end:`date +%s`:build_wheel\r\e[0K"
    - |
      #Repair the wheel
      echo -e "\e[0Ksection_start:`date +%s`:repair_wheel[collapsed=true]\r\e[0KRepair ddtrace wheel"
      docker run --rm --platform "linux/386" -v "$(pwd):/project" -w "/project" "${IMAGE}" /bin/bash -c "./.gitlab/repair_wheel_linux.sh wheelhouse/"
      echo -e "\e[0Ksection_end:`date +%s`:repair_wheel\r\e[0K"
  artifacts:
    name: wheelhouse-${PYTHON_TAG}-${PLATFORM}_${ARCH}
    paths:
      - wheelhouse/
