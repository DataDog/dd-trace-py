stages:
  - tests

variables:
  RIOT_RUN_CMD: riot -P -v run --exitfirst --pass-env -s
  REPO_LANG: python # "python" is used everywhere rather than "py"
  DD_PYTEST_USE_NEW_PLUGIN_BETA: "true"
  PYTEST_ADDOPTS: "-s"
  # CI_DEBUG_SERVICES: "true"

.testrunner:
  image: registry.ddbuild.io/images/mirror/dd-trace-py/testrunner:47c7b5287da25643e46652e6d222a40a52f2382a@sha256:3a02dafeff9cd72966978816d1b39b54f5517af4049396923b95c8452f604269
  # DEV: we have a larger pool of amd64 runners, prefer that over arm64
  tags: [ "arch:amd64" ]
  timeout: 20m
  before_script:
    - pyenv global 3.12 3.7 3.8 3.9 3.10 3.11 3.13-dev
    - export _CI_DD_AGENT_URL=http://${HOST_IP}:8126/


.services:
  ddagent:
    name: registry.ddbuild.io/images/mirror/datadog/agent:7.40.1
    alias: ddagent
    variables:
      DD_HOSTNAME: ddagent
      LOG_LEVEL: ERROR
      DD_REMOTE_CONFIGURATION_ENABLED: true
      DD_SITE: datadoghq.com
      DD_API_KEY: invalid_but_this_is_fine
      DD_REMOTE_CONFIGURATION_KEY: invalid_but_this_is_fine
      DD_REMOTE_CONFIGURATION_REFRESH_INTERVAL: 5s
      DD_DOGSTATSD_NON_LOCAL_TRAFFIC: true
  testagent:
    name: registry.ddbuild.io/images/mirror/dd-apm-test-agent/ddapm-test-agent:v1.17.0
    alias: testagent
    variables:
      LOG_LEVEL: INFO
      SNAPSHOT_DIR: ${CI_PROJECT_DIR}/tests/snapshots
      SNAPSHOT_CI: 1
      PORT: 9126
      DD_POOL_TRACE_CHECK_FAILURES: true
      DD_DISABLE_ERROR_RESPONSES: true
      ENABLED_CHECKS: trace_content_length,trace_stall,meta_tracer_version_header,trace_count_header,trace_peer_service,trace_dd_service
  mongo:
    name: registry.ddbuild.io/images/mirror/mongo:6.0.5
    alias: mongo
  redis:
    name: registry.ddbuild.io/redis:7.0.7
    alias: redis
  kafka:
    name: registry.ddbuild.io/images/mirror/apache/kafka:3.8.0
    alias: kafka
    variables:
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_NODE_ID: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CLUSTER_ID: 5L6g3nShT-eMCtK--X86sw
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  httpbin_local:
    name: registry.ddbuild.io/images/mirror/mccutchen/go-httpbin:v2.14.1
    alias: httpbin-local
    variables:
      PORT: 8001
  memcached:
    name: registry.ddbuild.io/images/mirror/library/memcached:1.5-alpine
    alias: memcached
  rediscluster:
    name: registry.ddbuild.io/images/mirror/grokzen/redis-cluster:6.2.0
    alias: rediscluster
  elasticsearch:
    name: registry.ddbuild.io/images/mirror/library/elasticsearch:7.17.23
    alias: elasticsearch
    variables:
      discovery.type: single-node
      xpack.security.enabled: false
  opensearch:
    name: registry.ddbuild.io/images/mirror/opensearchproject/opensearch:1.3.13
    alias: opensearch
    variables:
      DISABLE_SECURITY_PLUGIN: true
      discovery.type: single-node
      http.port: 9201
  postgres:
    name: registry.ddbuild.io/images/mirror/postgres:12-alpine
    alias: postgres
    variables:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
  rabbitmq:
    name: registry.ddbuild.io/images/mirror/rabbitmq:3.12.7-management-alpine
    alias: rabbitmq

.test_base_hatch:
  extends: .testrunner
  stage: tests
  # Hatch doesn't use pre-built wheels or venvs so we can start them right away
  needs: []
  parallel: 4
  # DEV: This is the max retries that GitLab currently allows for
  retry: 2
  script:
    - export PYTEST_ADDOPTS="${PYTEST_ADDOPTS} --ddtrace"
    - export _DD_CIVISIBILITY_USE_CI_CONTEXT_PROVIDER=true
    - |
      envs=( $(hatch env show --json | jq -r --arg suite_name "$SUITE_NAME" 'keys[] | select(. | contains($suite_name))' | sort | ./.gitlab/ci-split-input.sh) )
      if [[ ${#envs[@]} -eq 0 ]]; then
        echo "No hatch envs found for ${SUITE_NAME}"
        exit 1
      fi
      for env in "${envs[@]}"
      do
        echo "Running hatch env: ${env}:test"
        hatch run ${env}:test
      done


.test_base_hatch_snapshot:
  extends: .test_base_hatch
  services:
    - !reference [.services, testagent]
  before_script:
    - !reference [.testrunner, before_script]
    # DEV: All job variables get shared with services, setting `DD_TRACE_AGENT_URL` on the testagent will tell it to forward all requests to the
    # agent at that host. Therefore setting this as a variable will cause recursive requests to the testagent
    - export DD_TRACE_AGENT_URL="http://testagent:9126"


build_base_venvs:
  extends: .testrunner
  stage: tests
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]
  variables:
    CMAKE_BUILD_PARALLEL_LEVEL: 12
    PIP_VERBOSE: 1
    DD_PROFILING_NATIVE_TESTS: 1
  script:
    - pip install riot==0.20.1
    - riot -P -v generate --python=$PYTHON_VERSION
  artifacts:
    name: venv_$PYTHON_VERSION
    paths:
      - .riot/venv_*
      - ddtrace/**/*.so*
      - ddtrace/internal/datadog/profiling/crashtracker/crashtracker_exe*
      - ddtrace/internal/datadog/profiling/test/test_*

.test_base_riot:
  extends: .testrunner
  stage: tests
  needs: [ build_base_venvs ]
  parallel: 4
  services:
    - !reference [.services, ddagent]
  # DEV: This is the max retries that GitLab currently allows for
  retry: 2
  script:
    - pip install riot==0.20.1
    - unset DD_SERVICE
    - unset DD_ENV
    - unset DD_TAGS
    - unset DD_TRACE_REMOVE_INTEGRATION_SERVICE_NAMES_ENABLED
    - |
      hashes=( $(riot list --hash-only "${SUITE_NAME}" | sort | ./.gitlab/ci-split-input.sh) )
      if [[ ${#hashes[@]} -eq 0 ]]; then
        echo "No riot hashes found for ${SUITE_NAME}"
        exit 1
      fi
      for hash in "${hashes[@]}"
      do
        echo "Running riot hash: ${hash}"
        riot list "${hash}"
        ${RIOT_RUN_CMD} "${hash}" -- --ddtrace
      done
      ./scripts/check-diff ".riot/requirements/" \
        "Changes detected after running riot. Consider deleting changed files, running scripts/compile-and-prune-test-requirements and committing the result."


.test_base_riot_snapshot:
  extends: .test_base_riot
  services:
    - !reference [.test_base_riot, services]
    - !reference [.services, testagent]
  before_script:
    - !reference [.testrunner, before_script]
    # DEV: All job variables get shared with services, setting `DD_TRACE_AGENT_URL` on the testagent will tell it to forward all requests to the
    # agent at that host. Therefore setting this as a variable will cause recursive requests to the testagent
    - export DD_TRACE_AGENT_URL="http://testagent:9126"
    - ln -s "${CI_PROJECT_DIR}" "/root/project"


# Required jobs will appear here
llmobs::langchain:
  extends: .test_base_riot_snapshot
  variables:
    SUITE_NAME: langchain
  parallel: 6

llmobs::openai:
  extends: .test_base_riot_snapshot
  variables:
    SUITE_NAME: openai
  parallel: 10