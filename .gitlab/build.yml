variables:
  PYPA_IMAGE_BASE: registry.ddbuild.io/images/mirror/pypa
  PYPA_IMAGE_TAG: 2024-08-12-7fde9b1
  PYPA_DEFAULT_IMAGE: "${PYPA_IMAGE_BASE}/manylinux2014_x86_64:${PYPA_IMAGE_TAG}"


build_ddtrace_sdist:
  image: "${PYPA_DEFAULT_IMAGE}"
  tags: [ "arch:amd64" ]
  stage: package
  script:
    - curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y
    - export PATH=$HOME/.cargo/bin:$PATH
    - python3.12 -m build . --sdist --outdir wheelhouse/
  artifacts:
    paths:
      - wheelhouse/

build_ddtrace_linux:
  image: "${PYPA_IMAGE_BASE}/${PLATFORM}_${ARCH}:${PYPA_IMAGE_TAG}"
  tags: [ "${RUNNER}" ]
  stage: package
  parallel:
    matrix:
      # CIBW_MUSLLINUX_I686_IMAGE: ghcr.io/datadog/dd-trace-py/pypa_musllinux_1_2_i686:latest
      - PLATFORM: [ "manylinux2014", "musllinux_1_2" ]
        PYTHON_VERSION: [ "3.7", "3.8", "3.9", "3.10", "3.11", "3.12" ]
        ARCH: ["x86_64", "i686"]
        RUNNER: "arch:amd64"
      - PLATFORM: [ "manylinux2014", "musllinux_1_2" ]
        PYTHON_VERSION: [ "3.7", "3.8", "3.9", "3.10", "3.11", "3.12" ]
        ARCH: ["aarch64"]
        RUNNER: "arch:arm64"
  variables:
    DD_USE_SCCACHE: 1
    CMAKE_BUILD_PARALLEL_LEVEL: 24
    PATH: "/root/.cargo.bin:/opt/rh/devtoolset-10/root/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    SCCACHE_DIR: /root/.cache/sccache
    SCCACHE_CACHE_SIZE: 1G
    SCCACHE_DIRECT: true
  cache:
    - key: sccache-build-linux-$CI_JOB_NAME
      paths:
        - /root/.cache/sccache/
  before_script:
    # Install sccache
    - curl -L https://github.com/mozilla/sccache/releases/download/v0.8.1/sccache-v0.8.1-x86_64-unknown-linux-musl.tar.gz | tar zx --strip-components=1 -C /usr/local/bin/ sccache-v0.8.1-x86_64-unknown-linux-musl/sccache
    - sccache --version
    # Install rust
    - curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y
    - rustc --version
    # Check Python dependency versions
    - python${PYTHON_VERSION} --version
    - python${PYTHON_VERSION} -m build --version
  script:
    # Build the wheel
    - python${PYTHON_VERSION} -m build --wheel --outdir wheelhouse/
    # Repair the wheel
    - ./.gitlab/repair_wheel_linux.sh wheelhouse/
  artifacts:
    paths:
      - wheelhouse/

# build_ddtrace_windows:
#   tags: [ "runner:windows-docker", "windowsversion:1809" ]
#   stage: package
#   variables:
#     CIBW_BUILD: "${PYTHON_ABI}-${ARCH}"
#     CIBW_PLATFORM: windows
#     CIBW_ENVIRONMENT_WINDOWS: CMAKE_BUILD_PARALLEL_LEVEL=24
#     CIBW_BEFORE_WINDOWS: rustup target add i686-pc-windows-msvc
#     CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: |
#       7z d -r "{wheel}" *.c *.cpp *.cc *.h *.hpp *.pyx &&
#       move "{wheel}" "{dest_dir}"
#   parallel:
#     matrix:
#       - PYTHON_ABI: ["cp37", "cp38", "cp39", "cp310", "cp311", "cp312"]
#         ARCH: ["win32", "win_amd64"]
#   script:
#     - |
#       docker run --rm mcr.microsoft.com/windows/servercore:1809 cmd.exe /C @"
#       choco install python -y --version 3.12.4
#       choco install git.install -y
#       py -m pip install cibuildwheel
#       py -m cibuildwheel --print-build-identifiers
#       py -m cibuildwheel --output-dir wheelhouse
#       "@
#   artifacts:
#     paths:
#       - wheelhouse/

download_dependency_wheels:
  image: registry.ddbuild.io/images/mirror/python:$PYTHON_IMAGE_TAG
  tags: [ "arch:amd64" ]
  stage: package
  needs: [ build_ddtrace_linux ]
  parallel:
    matrix: # The image tags that are mirrored are in: https://github.com/DataDog/images/blob/master/mirror.yaml
      - PYTHON_IMAGE_TAG: "3.7"
        PYTHON_VERSION: "3.7"
      - PYTHON_IMAGE_TAG: "3.8"
        PYTHON_VERSION: "3.8"
      - PYTHON_IMAGE_TAG: "3.9.13"
        PYTHON_VERSION: "3.9"
      - PYTHON_IMAGE_TAG: "3.10.13"
        PYTHON_VERSION: "3.10"
      - PYTHON_IMAGE_TAG: "3.11.6"
        PYTHON_VERSION: "3.11"
      - PYTHON_IMAGE_TAG: "3.12.0"
        PYTHON_VERSION: "3.12"
  script:
    - .gitlab/download-dependency-wheels.sh
  artifacts:
    paths:
      - "wheelhouse-dep/"
