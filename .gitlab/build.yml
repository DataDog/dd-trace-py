variables:
  PYPA_IMAGE_BASE: registry.ddbuild.io/images/mirror/pypa
  PYPA_IMAGE_TAG: 2024-08-12-7fde9b1
  PYPA_DEFAULT_IMAGE: "${PYPA_IMAGE_BASE}/manylinux2014_x86_64:${PYPA_IMAGE_TAG}"

.python_tags: &python_tags
  - "cp37-cp37m"
  - "cp38-cp38"
  - "cp39-cp39"
  - "cp310-cp310"
  - "cp311-cp311"
  - "cp312-cp312"

.linux_platforms: &linux_platforms
  - "manylinux2014"
  - "musllinux_1_2"

.build_ddtrace_base:
  stage: package
  variables:
    CMAKE_BUILD_PARALLEL_LEVEL: 24
    PATH: "/root/.cargo/bin:/opt/rh/devtoolset-10/root/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

build_ddtrace_sdist:
  extends: .build_ddtrace_base
  image: "${PYPA_DEFAULT_IMAGE}"
  tags: [ "arch:amd64" ]
  script:
    - curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y
    - export PATH=$HOME/.cargo/bin:$PATH
    - python3.12 -m build . --sdist --outdir wheelhouse/
  artifacts:
    paths:
      - wheelhouse/

build_ddtrace_linux:
  extends: .build_ddtrace_base
  image: "${PYPA_IMAGE_BASE}/${PLATFORM}_${ARCH}:${PYPA_IMAGE_TAG}"
  tags: [ "${RUNNER}" ]
  parallel:
    matrix:
      - PLATFORM: *linux_platforms
        PYTHON_TAG: *python_tags
        ARCH: ["x86_64"]
        RUNNER: "arch:amd64"
      # Use runner:docker for i686 since we don't have a k8s linux/386 runner
      - PLATFORM: *linux_platforms
        PYTHON_TAG: *python_tags
        ARCH: ["i686"]
        RUNNER: "runner:docker"
      - PLATFORM: *linux_platforms
        PYTHON_TAG: *python_tags
        ARCH: ["aarch64"]
        RUNNER: "arch:arm64"
  before_script:
    # Install rust
    - >
      if [ "$ARCH" == "i686" && "$PLATFORM" == "musllinux_1_2" ];
      then
        apk add --no-cache gcc libgcc libstdc++ llvm15-libs musl musl-dev rust-stdlib
        apk add --no-cache rust cargo
      else
        curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y
      fi
    - rustc --version
    # Check Python dependency versions
    - /opt/python/${PYTHON_TAG}/bin/python --version
    - /opt/python/${PYTHON_TAG}/bin/python -m build --version
  script:
    # Build the wheel
    - /opt/python/${PYTHON_TAG}/bin/python -m build --wheel --outdir wheelhouse/
    # Repair the wheel
    - ./.gitlab/repair_wheel_linux.sh wheelhouse/
    # Download wheel dependencies (only for x86_64 and aarch64)
    - |
      [ "$ARCH" == "x86_64" || "$ARCH" == "aarch64" ] && .gitlab/download-dependency-wheels.sh /opt/python/${PYTHON_TAG}/bin/python
  artifacts:
    paths:
      - wheelhouse/
      - wheelhouse-dep/


# TODO: Windows and MacOS Builds
