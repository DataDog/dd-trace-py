stages:
  - test
  - gate
  - notify

variables:
  MACROBENCHMARKS_CI_IMAGE: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/benchmarking-platform:dd-trace-py-macrobenchmarks

.macrobenchmarks:
  stage: test
  needs: []
  tags: ["runner:apm-k8s-same-cpu"]
  timeout: 1h
  retry:
    max: 2
    when:
      - unknown_failure
      - data_integrity_failure
      - runner_system_failure
      - scheduler_failure
      - api_failure
  when: on_success
  image: $MACROBENCHMARKS_CI_IMAGE
  script: |
    # git clone --branch python/macrobenchmarks https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/DataDog/benchmarking-platform platform && cd platform
    # if [ "$BP_PYTHON_SCENARIO_DIR" == "flask-realworld" ]; then
    #   bp-runner bp-runner.flask-realworld.yml --debug
    # else
    #   bp-runner bp-runner.simple.yml --debug
    # fi
    mkdir -p platform/artifacts
    cp .gitlab/benchmarks/macrobenchmark-artifacts/* ./platform/artifacts/
    ls -la ./platform/artifacts/
  artifacts:
    name: "artifacts"
    when: always
    paths:
      - platform/artifacts/
    expire_in: 3 months
  variables:
    # Benchmark's env variables. Modify to tweak benchmark parameters.
    DD_TRACE_DEBUG: "false"
    DD_RUNTIME_METRICS_ENABLED: "false"
    DD_REMOTE_CONFIGURATION_ENABLED: "false"
    DD_INSTRUMENTATION_TELEMETRY_ENABLED: "false"
    DD_CRASHTRACKING_ENABLED: "false"
    DD_APPSEC_ENABLED: "false"

    K6_OPTIONS_WARMUP_RATE: 40
    K6_OPTIONS_WARMUP_DURATION: 1m
    K6_OPTIONS_WARMUP_GRACEFUL_STOP: 0s
    K6_OPTIONS_WARMUP_PRE_ALLOCATED_VUS: 4
    K6_OPTIONS_WARMUP_MAX_VUS: 4

    K6_OPTIONS_NORMAL_OPERATION_RATE: 40
    K6_OPTIONS_NORMAL_OPERATION_DURATION: 5m
    K6_OPTIONS_NORMAL_OPERATION_GRACEFUL_STOP: 1m
    K6_OPTIONS_NORMAL_OPERATION_PRE_ALLOCATED_VUS: 4
    K6_OPTIONS_NORMAL_OPERATION_MAX_VUS: 4

    K6_OPTIONS_HIGH_LOAD_RATE: 500
    K6_OPTIONS_HIGH_LOAD_DURATION: 1m
    K6_OPTIONS_HIGH_LOAD_GRACEFUL_STOP: 30s
    K6_OPTIONS_HIGH_LOAD_PRE_ALLOCATED_VUS: 4
    K6_OPTIONS_HIGH_LOAD_MAX_VUS: 4

    # Gitlab and BP specific env vars. Do not modify.
    FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY: "true"

  # Workaround: Currently we're not running the benchmarks on every PR, but GitHub still shows them as pending.
  # By marking the benchmarks as allow_failure, this should go away. (This workaround should be removed once the
  # benchmarks get changed to run on every PR)
  allow_failure: true

all-benchmarks:
  extends: .macrobenchmarks


# baseline:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: baseline
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/api/articles
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_SERVICE: "ddtrace-mb-baseline"


# tracing-runtime-metrics-enabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/api/articles
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_RUNTIME_METRICS_ENABLED: "false"
#     DD_SERVICE: "ddtrace-mb-tracing-runtime-metrics-enabled"

# tracing-rc-disabled-telemetry-disabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/api/articles
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_PROFILING_ENABLED: "false"
#     DD_REMOTE_CONFIGURATION_ENABLED: "false"
#     DD_INSTRUMENTATION_TELEMETRY_ENABLED: "false"
#     DD_SERVICE: "ddtrace-mb-tracing-rc-disabled-telemetry-disabled"

# tracing-rc-enabled-telemetry-disabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/api/articles
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_PROFILING_ENABLED: "false"
#     DD_REMOTE_CONFIGURATION_ENABLED: "true"
#     DD_INSTRUMENTATION_TELEMETRY_ENABLED: "false"
#     DD_SERVICE: "ddtrace-mb-tracing-rc-enabled-telemetry-disabled"

# tracing-rc-disabled-telemetry-enabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/api/articles
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_PROFILING_ENABLED: "false"
#     DD_REMOTE_CONFIGURATION_ENABLED: "false"
#     DD_INSTRUMENTATION_TELEMETRY_ENABLED: "true"
#     DD_SERVICE: "ddtrace-mb-tracing-rc-disabled-telemetry-enabled"

# tracing-rc-enabled-telemetry-enabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/api/articles
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_PROFILING_ENABLED: "false"
#     DD_REMOTE_CONFIGURATION_ENABLED: "true"
#     DD_INSTRUMENTATION_TELEMETRY_ENABLED: "true"
#     DD_SERVICE: "ddtrace-mb-tracing-rc-enabled-telemetry-enabled"

# tracing-profiling-enabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/api/articles
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_PROFILING_ENABLED: "true"
#     DD_SERVICE: "ddtrace-mb-tracing-profiling-enabled"

# appsec-enabled-iast-disabled-ep-disabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/api/articles
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_PROFILING_ENABLED: "false"
#     DD_APPSEC_ENABLED: "true"
#     DD_IAST_ENABLED: "false"
#     DD_APPSEC_RASP_ENABLED: "false"
#     DD_SERVICE: "ddtrace-mb-appsec-enabled-iast-disabled-ep-disabled"

# appsec-enabled-iast-disabled-ep-disabled-profiling-enabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/api/articles
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_PROFILING_ENABLED: "true"
#     DD_APPSEC_ENABLED: "true"
#     DD_IAST_ENABLED: "false"
#     DD_APPSEC_RASP_ENABLED: "false"
#     DD_SERVICE: "ddtrace-mb-appsec-enabled-iast-disabled-ep-disabled-profiling-enabled"

# appsec-disabled-iast-enabled-ep-disabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/api/articles
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_PROFILING_ENABLED: "false"
#     DD_APPSEC_ENABLED: "false"
#     DD_IAST_ENABLED: "true"
#     DD_APPSEC_RASP_ENABLED: "false"
#     DD_SERVICE: "ddtrace-mb-appsec-disabled-iast-enabled-ep-disabled"

# appsec-disabled-iast-enabled-ep-disabled-profiling-enabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/api/articles
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_PROFILING_ENABLED: "true"
#     DD_APPSEC_ENABLED: "false"
#     DD_IAST_ENABLED: "true"
#     DD_APPSEC_RASP_ENABLED: "false"
#     DD_SERVICE: "ddtrace-mb-appsec-disabled-iast-enabled-ep-disabled-profiling-enabled"

# appsec-enabled-iast-enabled-ep-disabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/api/articles
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_PROFILING_ENABLED: "false"
#     DD_APPSEC_ENABLED: "true"
#     DD_IAST_ENABLED: "true"
#     DD_APPSEC_RASP_ENABLED: "false"
#     DD_SERVICE: "ddtrace-mb-appsec-enabled-iast-enabled-ep-disabled"

# appsec-enabled-iast-disabled-ep-enabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/api/articles
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_PROFILING_ENABLED: "false"
#     DD_APPSEC_ENABLED: "true"
#     DD_IAST_ENABLED: "false"
#     DD_APPSEC_RASP_ENABLED: "true"
#     DD_SERVICE: "ddtrace-mb-appsec-enabled-iast-disabled-ep-enabled"

# vuln-baseline:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: baseline
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/iast/articles?string1=Hi&password=root1234
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     IAST_WORST: "true"
#     DD_SERVICE: "ddtrace-mb-vuln-baseline"

# vuln-appsec-disabled-iast-disabled-ep-disabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/iast/articles?string1=Hi&password=root1234
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_PROFILING_ENABLED: "false"
#     DD_APPSEC_ENABLED: "false"
#     DD_IAST_ENABLED: "disabled"
#     DD_APPSEC_RASP_ENABLED: "false"
#     IAST_WORST: "true"
#     DD_SERVICE: "ddtrace-mb-vuln-appsec-disabled-iast-disabled-ep-disabled"

# vuln-appsec-disabled-iast-enabled-ep-disabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/iast/articles?string1=Hi&password=root1234
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_PROFILING_ENABLED: "false"
#     DD_APPSEC_ENABLED: "false"
#     DD_IAST_ENABLED: "true"
#     DD_APPSEC_RASP_ENABLED: "false"
#     IAST_WORST: "true"
#     DD_SERVICE: "ddtrace-mb-vuln-appsec-disabled-iast-enabled-ep-disabled"

# vuln-appsec-disabled-iast-enabled-ep-disabled-profiling-enabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/iast/articles?string1=Hi&password=root1234
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_PROFILING_ENABLED: "true"
#     DD_APPSEC_ENABLED: "false"
#     DD_IAST_ENABLED: "true"
#     DD_APPSEC_RASP_ENABLED: "false"
#     IAST_WORST: "true"
#     DD_SERVICE: "ddtrace-mb-vuln-appsec-disabled-iast-enabled-ep-disabled-profiling-enabled"

# vuln-appsec-enabled-iast-enabled-ep-disabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_ENDPOINT: http://0.0.0.0:8000/iast/articles?string1=Hi&password=root1234
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_APPSEC_ENABLED: "true"
#     DD_IAST_ENABLED: "true"
#     DD_APPSEC_RASP_ENABLED: "false"
#     IAST_WORST: "true"
#     DD_SERVICE: "ddtrace-mb-vuln-appsec-enabled-iast-enabled-ep-disabled"

# attack-appsec-disabled-iast-disabled-ep-disabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/api/articles?q=select%20pg_sleep
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_PROFILING_ENABLED: "false"
#     DD_APPSEC_ENABLED: "false"
#     DD_IAST_ENABLED: "false"
#     DD_APPSEC_RASP_ENABLED: "false"
#     IAST_WORST: "true"
#     DD_SERVICE: "ddtrace-mb-attack-appsec-disabled-iast-disabled-ep-disabled"

# attack-appsec-enabled-iast-disabled-ep-enabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/api/articles?q=select%20pg_sleep
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_PROFILING_ENABLED: "false"
#     DD_APPSEC_ENABLED: "true"
#     DD_IAST_ENABLED: "false"
#     DD_APPSEC_RASP_ENABLED: "true"
#     IAST_WORST: "true"
#     DD_SERVICE: "ddtrace-mb-attack-appsec-enabled-iast-disabled-ep-enabled"

# attack-appsec-enabled-iast-disabled-ep-enabled-profiling-enabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/api/articles?q=select%20pg_sleep
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_PROFILING_ENABLED: "true"
#     DD_APPSEC_ENABLED: "true"
#     DD_IAST_ENABLED: "false"
#     DD_APPSEC_RASP_ENABLED: "true"
#     IAST_WORST: "true"
#     DD_SERVICE: "ddtrace-mb-attack-appsec-enabled-iast-disabled-ep-enabled-profiling-enabled"

# attack-appsec-enabled-iast-enabled-ep-enabled:
#   extends: .macrobenchmarks
#   variables:
#     DD_BENCHMARKS_CONFIGURATION: only-tracing
#     BP_PYTHON_SCENARIO_DIR: flask-realworld
#     BP_ENDPOINT: http://0.0.0.0:8000/api/articles?q=select%20pg_sleep
#     DDTRACE_INSTALL_VERSION: "git+https://github.com/Datadog/dd-trace-py@${CI_COMMIT_SHA}"
#     DD_TRACE_ENABLED: "true"
#     DD_PROFILING_ENABLED: "false"
#     DD_APPSEC_ENABLED: "true"
#     DD_IAST_ENABLED: "true"
#     DD_APPSEC_RASP_ENABLED: "true"
#     IAST_WORST: "true"
#     DD_SERVICE: "ddtrace-mb-attack-appsec-enabled-iast-enabled-ep-enabled"

check-slo-breaches:
  stage: gate
  when: always
  tags: ["arch:amd64"]
  image: registry.ddbuild.io/images/benchmarking-platform-tools-ubuntu:pre-release-gate-update
  artifacts:
    name: "artifacts"
    when: always
    paths:
      - platform/artifacts/
    expire_in: 3 months
  script:
    # TODO: Revert branch, keep only one configuration file
    - cd platform && (git init && git remote add origin https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/DataDog/benchmarking-platform && git pull origin igoragoli/pre-release-gate-update)
    - echo "Running loose check"
    - bp-runner bp-runner.fail-on-breach.loose.yml
    - echo "Running strict check"
    - bp-runner bp-runner.fail-on-breach.strict.yml


.slack-notifier-base:
  stage: notify
  image: registry.ddbuild.io/slack-notifier:v27936653-9a2a7db-sdm-gbi-jammy@sha256:c9d1145319d1904fa72ea97904a15200d3cb684324723f9e1700bc02cc85065c
  tags: [ "arch:amd64" ]
  before_script:
    - if [[ $GITLAB_USER_LOGIN = "codesync" || $GITLAB_USER_LOGIN = "ddci-service-account" ]]; then EMAIL=$(git show -s --format="%ae" HEAD); else EMAIL=$GITLAB_USER_EMAIL; fi
    - SLACK_AUTHOR=$(echo $EMAIL | email2slackid || echo "")
    - if [ -z "$SLACK_AUTHOR" ]; then echo "author not found or unsubscribed"; fi
    - BUILD_URL="$CI_PROJECT_URL/pipelines/$CI_PIPELINE_ID"

notify-slo-breaches:
  extends: .slack-notifier-base
  needs: ["check-slo-breaches"]
  when: always
  artifacts:
    name: "artifacts"
    when: always
    paths:
      - platform/artifacts/
    expire_in: 3 months
  script:
    - |
      if [ -f platform/artifacts/threshold_breaches_detected ]; then
        MESSAGE_TEXT=":x: $CI_COMMIT_REF_NAME - Performance SLOs in $CI_PROJECT_NAME were breached in <$BUILD_URL|$CI_PIPELINE_ID>. Please look into it."
      elif [ -f platform/artifacts/warning_breaches_detected ]; then
        MESSAGE_TEXT=":warning: $CI_COMMIT_REF_NAME - Performance SLOs in $CI_PROJECT_NAME are about to be breached. A warning threshold in <$BUILD_URL|$CI_PIPELINE_ID> was triggered. Please look into it."
      fi
    - if [ -n "${MESSAGE_TEXT:-}" ]; then postmessage "pre-release-gate-prototype" "$MESSAGE_TEXT"; fi
