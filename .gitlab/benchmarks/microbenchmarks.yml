stages:
  - build
  - test
  - report

variables:
  BENCHMARKING_IMAGE_REGISTRY: 486234852809.dkr.ecr.us-east-1.amazonaws.com
  MICROBENCHMARKS_CI_IMAGE: $BENCHMARKING_IMAGE_REGISTRY/ci/benchmarking-platform:dd-trace-py

.benchmarks:
  stage: test
  when: on_success
  tags: ["runner:apm-k8s-tweaked-metal"]
  image: $MICROBENCHMARKS_CI_IMAGE
  interruptible: true
  timeout: 1h
  variables:
    CMAKE_BUILD_PARALLEL_LEVEL: 12
    CARGO_BUILD_JOBS: 12
  dependencies: [ "baseline:build", "candidate", "latest" ]
  script: |
    export REPORTS_DIR="$(pwd)/reports/" && (mkdir "${REPORTS_DIR}" || :)

    if [ -n ${CI_JOB_TOKEN} ];
    then
      git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/DataDog/".insteadOf "https://github.com/DataDog/"
    fi
    git clone --branch brettlangdon/dd-trace-py.run-script https://github.com/DataDog/benchmarking-platform /platform
    cd /platform

    ./steps/capture-hardware-software-info.sh

    if [[ $SCENARIO =~ ^flask_* ]];
    then
      BP_SCENARIO=$SCENARIO bp-runner "$REPORTS_DIR/../.gitlab/benchmarks/bp-runner.yml" --debug -t
    else
      ./steps/run-benchmarks.sh
    fi

    ./steps/analyze-results.sh

    ./steps/upload-results-to-s3.sh || :
  artifacts:
    name: "reports"
    when: always
    paths:
      - reports/
    expire_in: 3 months
  variables:
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID # The ID of the current project. This ID is unique across all projects on the GitLab instance.
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME # "dd-trace-py"
    UPSTREAM_BRANCH: $CI_COMMIT_REF_NAME # The branch or tag name for which project is built.
    UPSTREAM_COMMIT_SHA: $CI_COMMIT_SHA # The commit revision the project is built for.
    KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: dd-trace-py
    FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY: "true"
    CARGO_NET_GIT_FETCH_WITH_CLI: "true" # use system git binary to pull git dependencies

baseline:detect:
  image: registry.ddbuild.io/github-cli:v27480869-eafb11d-2.43.0
  tags: [ "arch:amd64" ]
  stage: build
  script: |
    if [ -z ${GH_TOKEN} ]
    then
      aws ssm get-parameter --region us-east-1 --name ci.$CI_PROJECT_NAME.gh_token --with-decryption --query "Parameter.Value" --out text > token
      gh auth login --with-token < token
      rm token
    fi

    # Needed to run `git merge-base` and `git rev-list`
    git config --global --add safe.directory ${CI_PROJECT_DIR}
    BASELINE_BRANCH=$(gh pr view --json "baseRefName" --jq ".baseRefName" "${UPSTREAM_BRANCH}" || echo "main")
    echo "BASELINE_BRANCH=${BASELINE_BRANCH}" | tee baseline.env
    BASELINE_COMMIT_SHA=$(git merge-base "origin/${BASELINE_BRANCH}" "origin/${UPSTREAM_BRANCH}" || git rev-list -1 "origin/${BASELINE_BRANCH}")
    echo "BASELINE_COMMIT_SHA=${BASELINE_COMMIT_SHA}" | tee -a baseline.env
  artifacts:
    reports:
      dotenv: baseline.env

baseline:build:
  image: registry.ddbuild.io/images/mirror/dd-trace-py/testrunner:0a50e839f4b1600f02157518b8d016451b346578@sha256:5dae9bc7872f69b31b612690f0748c7ad71ab90ef28a754b2ae93d0ba505837b
  tags: [ "arch:amd64" ]
  needs: [ "baseline:detect" ]
  stage: build
  variables:
    CMAKE_BUILD_PARALLEL_LEVEL: 12
    CARGO_BUILD_JOBS: 12
  script: |
    if [ ! -f baseline.whl ];
    then
      ulimit -c unlimited
      pyenv global 3.9

      echo "Building wheel for ${BASELINE_BRANCH}:${BASELINE_COMMIT_SHA}"
      git checkout "${BASELINE_COMMIT_SHA}"
      python3.9 -m pip wheel --no-deps .
    else
      echo "Using wheel from cache for ${BASELINE_BRANCH}:${BASELINE_COMMIT_SHA}"
    fi

    echo BASELINE_WHL=$(ls *.whl | head -n 1) | tee -a baseline.env
  cache:
    - key: 0-microbenchmarks-baseline-build-${BASELINE_COMMIT_SHA}
      paths:
        - "*.whl"
  artifacts:
    reports:
      dotenv: baseline.env
    paths:
      - "*.whl"

latest:
  image: registry.ddbuild.io/images/mirror/dd-trace-py/testrunner:0a50e839f4b1600f02157518b8d016451b346578@sha256:5dae9bc7872f69b31b612690f0748c7ad71ab90ef28a754b2ae93d0ba505837b
  tags: [ "arch:amd64" ]
  stage: build
  script: |
    pyenv global 3.9
    python3.9 -m pip download --no-deps ddtrace
    echo LATEST_WHL=$(ls *.whl | head -n 1) | tee latest.env
  artifacts:
    reports:
      dotenv: latest.env
    paths:
      - "*.whl"

candidate:
  stage: build
  tags: [ "arch:amd64" ]
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: download_ddtrace_artifacts
  script: |
    cp pywheels/*-cp39-cp39-manylinux_*_x86_64*.whl ./
    echo CANDIDATE_WHL=$(ls *.whl | head -n 1) | tee candidate.env
  artifacts:
    reports:
      dotenv: candidate.env
    paths:
      - "*.whl"

microbenchmarks:
  extends: .benchmarks
  parallel:
    matrix:
      - SCENARIO:
        - "span"
        - "tracer"
        - "sampling_rule_matches"
        - "set_http_meta"
        - "django_simple"
        - "flask_simple"
        - "flask_sqli"
        - "core_api"
        - "otel_span"
        - "appsec_iast_propagation"
        - "appsec_iast_aspects"
        # Flaky. Timeout errors
        # - "encoder"
        - "http_propagation_extract"
        - "http_propagation_inject"
        - "rate_limiter"
        - "packages_update_imported_dependencies"

benchmarks-pr-comment:
  image: $MICROBENCHMARKS_CI_IMAGE
  tags: ["arch:amd64"]
  stage: report
  when: always
  script:
    - export REPORTS_DIR="$(pwd)/reports/" && (mkdir "${REPORTS_DIR}" || :)
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/DataDog/".insteadOf "https://github.com/DataDog/"
    - git clone --branch dd-trace-py https://github.com/DataDog/benchmarking-platform /platform && cd /platform
    - "(for i in {1..2}; do ./steps/upload-results-to-benchmarking-api.sh && break; done) || :"
    - "./steps/post-pr-comment.sh || :"
  except:
    - main
  variables:
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID # The ID of the current project. This ID is unique across all projects on the GitLab instance.
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME # "dd-trace-py"
    UPSTREAM_BRANCH: $CI_COMMIT_REF_NAME # The branch or tag name for which project is built.
    UPSTREAM_COMMIT_SHA: $CI_COMMIT_SHA # The commit revision the project is built for.
    KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: dd-trace-py

check-big-regressions:
  stage: report
  when: always
  tags: ["arch:amd64"]
  image: $MICROBENCHMARKS_CI_IMAGE
  script:
    - export ARTIFACTS_DIR="$(pwd)/reports/"
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/DataDog/".insteadOf "https://github.com/DataDog/"
    - git clone --branch dd-trace-py https://github.com/DataDog/benchmarking-platform /platform && cd /platform
    - bp-runner bp-runner.fail-on-regression.yml --debug
  variables:
    # Gitlab and BP specific env vars. Do not modify.
    KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: dd-trace-py
