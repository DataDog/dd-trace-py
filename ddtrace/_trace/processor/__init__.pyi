from typing import List, Optional

from ddtrace._trace.span import Span

class TraceProcessor:
    def process_trace(self, trace: List[Span]) -> Optional[List[Span]]: ...

class SpanProcessor:
    def on_span_start(self, span: Span) -> None: ...
    def on_span_finish(self, span: Span) -> None: ...
    def shutdown(self, timeout: Optional[float]) -> None: ...
    def register(self) -> None: ...
    def unregister(self) -> None: ...

class TraceSamplingProcessor(TraceProcessor): ...
class TopLevelSpanProcessor(SpanProcessor): ...
class ServiceNameProcessor(TraceProcessor): ...
class TraceTagsProcessor(TraceProcessor): ...
class SpanAggregator(SpanProcessor): ...
