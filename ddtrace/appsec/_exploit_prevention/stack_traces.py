import inspect
from itertools import chain
import json
from secrets import choice
from typing import Any
from typing import Dict
from typing import Iterable
from typing import List
from typing import Optional

from ddtrace._trace.span import Span
from ddtrace.appsec._asm_request_context import _get_asm_context
import ddtrace.tracer


def report_stack(message: str, span: Optional[Span] = None):
    if span is None:
        span = ddtrace.tracer.current_span()
    if span is None:
        return
    root_span = span._local_root or span
    stack = inspect.stack()[1:]
    stack_id = "".join(choice("0123456789ABCDEF") for _ in range(16))
    res: Dict[str, Any] = {
        "language": "python",
        "id": stack_id,
        "message": message,
    }
    if len(stack) > 32:
        iterator: Iterable[int] = chain(range(8), range(len(stack) - 24, len(stack)))
    else:
        iterator = range(len(stack))
    frames = [
        {
            "id": i,
            "function": getattr(stack[i].frame.f_code, "co_qualname", stack[i].frame.f_code.co_name),
            "file": stack[i].filename,
            "line": stack[i].lineno,
        }
        for i in iterator
    ]
    res["frames"] = frames
    appsec_traces = span.get_struct_tag("appsec_traces") or {}
    exploit: List[Any] = appsec_traces.get("exploit", [])
    exploit.append(res)
    appsec_traces["exploit"] = exploit
    root_span.set_struct_tag("appsec_traces", appsec_traces)
    root_span.set_struct_tag("_dd.stack", appsec_traces)

    # Try to link the stack trace to the first trigger for the demo
    trigger = _get_asm_context().waf_triggers
    if trigger:
        trigger[0]["stack_id"] = stack_id
        print(json.dumps(trigger[0], indent=2))
