import inspect
from itertools import chain
import random
from typing import Any
from typing import Dict
from typing import Iterable
from typing import List

from ddtrace._trace.span import Span


def report_stack(message: str, span: Span):
    stack = inspect.stack()
    res: Dict[str, Any] = {
        "language": "python",
        "id": "".join(random.choices("0123456789ABCDEF", k=16)),
        "message": message,
    }
    if len(stack) > 32:
        iterator: Iterable[int] = chain(range(24), range(len(stack) - 8, len(stack)))
    else:
        iterator = range(len(stack))
    frames = [
        {
            "id": i,
            "function": getattr(stack[i].frame.f_code, "co_qualname", stack[i].frame.f_code.co_name),
            "file": stack[i].filename,
            "line": stack[i].lineno,
        }
        for i in iterator
    ]
    res["frames"] = frames
    appsec = span.get_struct_tag("appsec") or {}
    exploit: List[Any] = appsec.get("exploit", [])
    exploit.append(res)
    appsec["exploit"] = exploit
    span.set_struct_tag("appsec", appsec)
