"""
Module providing async hooks. Do not import this module unless using Python >= 3.6.
"""
from ddtrace.contrib.asgi import TraceMiddleware

from .. import trace_utils
from ...utils import get_argument_value
from .utils import _after_request_tags
from .utils import _before_request_tags


@trace_utils.with_traced_module
async def traced_get_response_async(django, pin, func, instance, args, kwargs):
    """Trace django.core.handlers.base.BaseHandler.get_response() (or other implementations).

    This is the main entry point for requests.

    Django requests are handled by a Handler.get_response method (inherited from base.BaseHandler).
    This method invokes the middleware chain and returns the response generated by the chain.
    """
    request = get_argument_value(args, kwargs, 0, "request")
    span = TraceMiddleware._get_asgi_span(pin.tracer)
    if request is None or span is None:
        return await func(*args, **kwargs)

    _before_request_tags(pin, span, request)
    response = await func(*args, **kwargs)
    _after_request_tags(pin, span, request, response)
    return response
