{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Datadog Python Integration Registry Schema (Current State)",
    "description": "Schema matching the current fields generated by populate_registry.py.",
    "type": "object",
    "properties": {
      "integrations": {
        "description": "List of all Datadog integration definitions.",
        "type": "array",
        "minItems": 1,
        "items": {
          "$ref": "#/definitions/integration"
        }
      }
    },
    "required": [
      "integrations"
    ],
    "additionalProperties": false,
    "definitions": {
      "integration": {
        "type": "object",
        "description": "Schema for a single integration definition (current state).",
        "properties": {
          "integration_name": {
            "description": "Canonical integration name used within ddtrace (lowercase, snake_case).",
            "type": "string",
            "pattern": "^[a-z0-9_]+$"
          },
          "is_external_package": {
            "description": "True if this instruments an external PyPI package, False for stdlib/internal/testing.",
            "type": "boolean"
          },
          "dependency_name": {
            "description": "Optional: List of primary PyPI package names instrumented (present if is_external_package=true and dependencies exist).",
            "type": "array",
            "items": { "type": "string" },
            "minItems": 1
          },
          "is_patchable": {
             "description": "True if this integration exists as a key in ddtrace._monkey.PATCH_MODULES.",
             "type": "boolean"
          },
          "patched_by_default": {
             "description": "Optional: Default patch status (True, False, CONFIG_*, DYNAMIC(*), MISSING*). Generally present only if is_patchable=true or status is MISSING.",
             "oneOf": [
                { "type": "boolean" },
                { "type": "string" }
             ]
          },
          "instrumented_modules": {
            "description": "Optional: List of Python module paths targeted by instrumentation (present if is_patchable=true).",
            "type": "array",
            "items": { "type": "string" },
            "minItems": 1
          },
          "tested_version_min": {
            "description": "Optional: Minimum explicit version found in test lockfiles (present if is_external_package=true and versions found).",
            "type": "string"
          },
          "tested_version_max": {
            "description": "Optional: Maximum explicit version found in test lockfiles (present if is_external_package=true and versions found).",
            "type": "string"
          },
          "tested_versions_list": {
            "description": "Optional: Explicit list of all versions found in test lockfiles (present if is_external_package=true and versions found).",
             "type": "array",
             "items": { "type": "string" }
          }
        },
        "required": [
          "integration_name",
          "is_external_package",
          "is_patchable"
        ],
        "additionalProperties": false
      }
    }
}
