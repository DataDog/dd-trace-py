__version_info__ = ("1", "15", "0")
__version__ = ".".join(__version_info__)

from inspect import getcallargs

from .arguments import formatargspec
from .decorators import AdapterFactory
from .decorators import adapter_factory
from .decorators import decorator
from .decorators import synchronized
from .importer import discover_post_import_hooks
from .importer import notify_module_loaded
from .importer import register_post_import_hook
from .importer import when_imported
from .wrappers import BoundFunctionWrapper
from .wrappers import CallableObjectProxy
from .wrappers import FunctionWrapper
from .wrappers import ObjectProxy
from .wrappers import PartialCallableObjectProxy
from .wrappers import WeakFunctionProxy
from .wrappers import apply_patch
from .wrappers import function_wrapper
from .wrappers import patch_function_wrapper
from .wrappers import resolve_path
from .wrappers import transient_function_wrapper
from .wrappers import wrap_function_wrapper
from .wrappers import wrap_object
from .wrappers import wrap_object_attribute


# Import of inspect.getcallargs() included for backward compatibility. An
# implementation of this was previously bundled and made available here for
# Python <2.7. Avoid using this in future.


# Variant of inspect.formatargspec() included here for forward compatibility.
# This is being done because Python 3.11 dropped inspect.formatargspec() but
# code for handling signature changing decorators relied on it. Exposing the
# bundled implementation here in case any user of wrapt was also needing it.
