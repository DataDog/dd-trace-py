stages:
  - package
  - tests-gen
  - tests-trigger
  - shared-pipeline
  - benchmarks
  - macrobenchmarks
  - release

variables:
  REPO_LANG: python # "python" is used everywhere rather than "py"
  # CI_DEBUG_SERVICES: "true"

include:
  - remote: https://gitlab-templates.ddbuild.io/libdatadog/include/one-pipeline.yml
  - local: ".gitlab/services.yml" # Include early so others can use the definitions
  - local: ".gitlab/benchmarks.yml"
  - local: ".gitlab/package.yml"
  - local: ".gitlab/macrobenchmarks.yml"
  - local: ".gitlab/release.yml"
  - local: ".gitlab/testrunner.yml"

tests-gen:
  stage: tests-gen
  extends: .testrunner
  script:
    - pip install riot==0.20.0
    - riot -v run --pass-env -s gitlab-gen-config -v
  needs: []
  artifacts:
    paths:
      - .gitlab/tests-gen.yml

run-tests-trigger:
 stage: tests-trigger
 needs: [ tests-gen ]
 trigger:
   include:
     - artifact: .gitlab/tests-gen.yml
       job: tests-gen
   strategy: depend

requirements_json_test:
  rules:
    - when: on_success
  variables:
    REQUIREMENTS_BLOCK_JSON_PATH: ".gitlab/requirements_block.json"
    REQUIREMENTS_ALLOW_JSON_PATH: ".gitlab/requirements_allow.json"

package-oci:
  needs: [ download_dependency_wheels, download_ddtrace_artifacts ]

onboarding_tests_installer:
  parallel:
    matrix:
      - ONBOARDING_FILTER_WEBLOG: [test-app-python,test-app-python-container,test-app-python-alpine]


onboarding_tests_k8s_injection:
  parallel:
    matrix:
      - WEBLOG_VARIANT:
          - dd-lib-python-init-test-django
          - dd-lib-python-init-test-django-gunicorn
          - dd-lib-python-init-test-django-gunicorn-alpine
          - dd-lib-python-init-test-django-preinstalled
          - dd-lib-python-init-test-django-unsupported-package-force
          - dd-lib-python-init-test-django-uvicorn
          - dd-lib-python-init-test-protobuf-old

deploy_to_di_backend:manual:
  stage: shared-pipeline
  rules:
    - when: manual
      allow_failure: true
  trigger:
    project: DataDog/debugger-demos
    branch: main
  variables:
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME
    UPSTREAM_COMMIT_SHORT_SHA: $CI_COMMIT_SHORT_SHA
    UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
    UPSTREAM_COMMIT_AUTHOR: $CI_COMMIT_AUTHOR
    UPSTREAM_TAG: $CI_COMMIT_TAG
    UPSTREAM_PACKAGE_JOB: build
