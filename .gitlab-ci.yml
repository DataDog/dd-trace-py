stages:
  - package
  - tests
  - shared-pipeline
  - dogfood
  - benchmarks
  - macrobenchmarks
  - dogfood
  - release

variables:
  REPO_LANG: python # "python" is used everywhere rather than "py"
  TESTRUNNER_IMAGE: ghcr.io/datadog/dd-trace-py/testrunner@sha256:4c8afd048321e702f3605b4ae4d206fcd00e74bac708089cfe7f9c24383dc53b
  # CI_DEBUG_SERVICES: "true"

.testrunner:
  image: $TESTRUNNER_IMAGE
  # DEV: we have a larger pool of amd64 runners, prefer that over arm64
  tags: [ "arch:amd64" ]
  timeout: 20m
  before_script:
    - pyenv global 3.12 3.7 3.8 3.9 3.10 3.11 3.13-dev

include:
  - remote: https://gitlab-templates.ddbuild.io/libdatadog/include/one-pipeline.yml
  - local: ".gitlab/benchmarks.yml"
  - local: ".gitlab/package.yml"
  - local: ".gitlab/tests.yml"
  - local: ".gitlab/macrobenchmarks.yml"
  - local: ".gitlab/dogfood.yml"
  - local: ".gitlab/release.yml"

package-oci:
  needs: [ download_dependency_wheels, download_ddtrace_artifacts ]

onboarding_tests_installer:
  parallel:
    matrix:
      - ONBOARDING_FILTER_WEBLOG: [test-app-python,test-app-python-container,test-app-python-alpine-libgcc]


onboarding_tests_k8s_injection:
  parallel:
    matrix:
      - WEBLOG_VARIANT: [dd-lib-python-init-test-django, dd-lib-python-init-test-django-gunicorn, dd-lib-python-init-test-django-uvicorn, dd-lib-python-init-test-protobuf-old]

deploy_to_di_backend:manual:
  stage: shared-pipeline
  rules:
    - when: manual
      allow_failure: true
  trigger:
    project: DataDog/debugger-demos
    branch: main
  variables:
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME
    UPSTREAM_COMMIT_SHORT_SHA: $CI_COMMIT_SHORT_SHA
    UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
    UPSTREAM_COMMIT_AUTHOR: $CI_COMMIT_AUTHOR
    UPSTREAM_TAG: $CI_COMMIT_TAG
    UPSTREAM_PACKAGE_JOB: build

started:
  image: registry.ddbuild.io/github-cli:v27480869-eafb11d-2.43.0
  tags: [ "arch:amd64" ]
  stage: .pre
  before_script:
    - aws ssm get-parameter --region us-east-1 --name ci.$CI_PROJECT_NAME.gh_token --with-decryption --query "Parameter.Value" --out text > token
    - gh auth login --with-token < token
    - rm token
  script:
    - >
      gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"
      /repos/DataDog/${CI_PROJECT_NAME}/check-runs
      -f "name=dd-gitlab" -f "head_sha=${CI_COMMIT_SHA}" -f "status=in_progress" -f "started_at=$(date +"%Y-%m-%dT%H:%M:%S%:z")"
      -f "details_url=${CI_PIPELINE_URL}" -f "output[title]=DataDog/${CI_PROJECT_NAME} GitLab Pipeline" | jq .id > dd-gitlab_check_run_id
  artifacts:
    paths:
      - ./dd-gitlab_check_run_id

finished:
  extends: started
  stage: .post
  dependencies: [ "started" ]
  rules:
    - when: on_success
  script:
    - >
      gh api --method PATCH -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"
      /repos/DataDog/${CI_PROJECT_NAME}/check-runs/$(cat dd-gitlab_check_run_id)
      -f "status=completed" -f "conclusion=success" -f "completed_at=$(date +"%Y-%m-%dT%H:%M:%S%:z")"

failed:
  extends: finished
  rules:
    - when: on_failure
  script:
    - >
      gh api --method PATCH -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"
      /repos/DataDog/${CI_PROJECT_NAME}/check-runs/$(cat dd-gitlab_check_run_id)
      -f "status=completed" -f "conclusion=failure" -f "completed_at=$(date +"%Y-%m-%dT%H:%M:%S%:z")"
