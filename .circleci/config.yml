version: 2

jobs:
  flake8:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-flake8-{{ checksum "tox.ini" }}
      - run: tox -e 'flake8' --result-json /tmp/flake8.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - flake8.results
      - save_cache:
          key: tox-cache-flake8-{{ checksum "tox.ini" }}
          paths:
            - .tox

  tracer:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-tracer-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-tracer' --result-json /tmp/tracer.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - tracer.results
      - save_cache:
          key: tox-cache-tracer-{{ checksum "tox.ini" }}
          paths:
            - .tox

  opentracer:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-opentracer-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-opentracer' --result-json /tmp/opentracer.results
      - run: tox -e '{py34,py35,py36}-opentracer_asyncio' --result-json /tmp/opentracer-asyncio.results
      - run: tox -e '{py34,py35,py36}-opentracer_tornado-tornado{40,41,42,43,44}' --result-json /tmp/opentracer-tornado.results
      - run: tox -e '{py27}-opentracer_gevent-gevent{10}' --result-json /tmp/opentracer-gevent.1.results
      - run: tox -e '{py27,py34,py35,py36}-opentracer_gevent-gevent{11,12}' --result-json /tmp/opentracer-gevent.2.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - opentracer.results
            - opentracer-gevent.results
            - opentracer-asyncio.results
            - opentracer-tornado.results
      - save_cache:
          key: tox-cache-opentracer-{{ checksum "tox.ini" }}
          paths:
            - .tox

  integration:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
        env:
          TEST_DATADOG_INTEGRATION: 1
      - image: datadog/docker-dd-agent
        env:
            - DD_APM_ENABLED=true
            - DD_BIND_HOST=0.0.0.0
            - DD_API_KEY=invalid_key_but_this_is_fine
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-integration-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-integration' --result-json /tmp/integration.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - integration.results

      - save_cache:
          key: tox-cache-integration-{{ checksum "tox.ini" }}
          paths:
            - .tox

  futures:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-futures-{{ checksum "tox.ini" }}
      - run: tox -e '{py27}-threading-futures{30,31,32}' --result-json /tmp/futures.1.results
      - run: tox -e '{py34,py35,py36}-threading' --result-json /tmp/futures.2.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - futures.1.results
            - futures.2.results
      - save_cache:
          key: tox-cache-futures-{{ checksum "tox.ini" }}
          paths:
            - .tox

  boto:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-boto-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34}-boto' --result-json /tmp/boto.1.results
      - run: tox -e '{py27,py34}-botocore' --result-json /tmp/boto.2.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - boto.1.results
            - boto.2.results
      - save_cache:
          key: tox-cache-boto-{{ checksum "tox.ini" }}
          paths:
            - .tox

  ddtracerun:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
      - image: redis:3.2
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-ddtracerun-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-ddtracerun' --result-json /tmp/ddtracerun.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - ddtracerun.results
      - save_cache:
          key: tox-cache-ddtracerun-{{ checksum "tox.ini" }}
          paths:
            - .tox

  asyncio:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-asyncio-{{ checksum "tox.ini" }}
      - run: tox -e '{py34,py35,py36}-asyncio' --result-json /tmp/asyncio.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - asyncio.results
      - save_cache:
          key: tox-cache-asyncio-{{ checksum "tox.ini" }}
          paths:
            - .tox

  pylons:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-pylons-{{ checksum "tox.ini" }}
      - run: tox -e '{py27}-pylons{096,097,010,10}' --result-json /tmp/pylons.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - pylons.results
      - save_cache:
          key: tox-cache-pylons-{{ checksum "tox.ini" }}
          paths:
            - .tox

  aiohttp:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-aiohttp-{{ checksum "tox.ini" }}
      - run: tox -e '{py34,py35,py36}-aiohttp{12,13,20,21,22}-aiohttp_jinja{012,013}-yarl' --result-json /tmp/aiohttp.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - aiohttp.results
      - save_cache:
          key: tox-cache-aiohttp-{{ checksum "tox.ini" }}
          paths:
            - .tox

  tornado:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-tornado-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-tornado{40,41,42,43,44}' --result-json /tmp/tornado.1.results
      - run: tox -e '{py27}-tornado{40,41,42,43,44}-futures{30,31,32}' --result-json /tmp/tornado.2.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - tornado.1.results
            - tornado.2.results
      - save_cache:
          key: tox-cache-tornado-{{ checksum "tox.ini" }}
          paths:
            - .tox

  bottle:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-bottle-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-bottle{11,12}-webtest' --result-json /tmp/bottle.1.results
      - run: tox -e '{py27,py34,py35,py36}-bottle-autopatch{11,12}-webtest' --result-json /tmp/bottle.2.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - bottle.1.results
            - bottle.2.results
      - save_cache:
          key: tox-cache-bottle-{{ checksum "tox.ini" }}
          paths:
            - .tox

  cassandra:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
        env:
          - CASS_DRIVER_NO_EXTENSIONS=1
      - image: cassandra:3.7
        env:
          - MAX_HEAP_SIZE=1024M
          - HEAP_NEWSIZE=400M
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-cassandra-{{ checksum "tox.ini" }}
      - run: tox -e wait cassandra
      - run: tox -e '{py27,py34,py35,py36}-cassandra{35,36,37,38}' --result-json /tmp/cassandra.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - cassandra.results
      - save_cache:
          key: tox-cache-cassandra-{{ checksum "tox.ini" }}
          paths:
            - .tox

  celery:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
      - image: redis:3.2
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-celery-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-celery{31,40}-redis{210}' --result-json /tmp/celery.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - celery.results
      - save_cache:
          key: tox-cache-celery-{{ checksum "tox.ini" }}
          paths:
            - .tox

  elasticsearch:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
      - image: elasticsearch:2.3
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-elasticsearch-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-elasticsearch{16,17,18,23,24,51,52,53,54}' --result-json /tmp/elasticsearch.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - elasticsearch.results
      - save_cache:
          key: tox-cache-elasticsearch-{{ checksum "tox.ini" }}
          paths:
            - .tox

  falcon:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-falcon-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-falcon{10,11,12}' --result-json /tmp/falcon.1.results
      - run: tox -e '{py27,py34,py35,py36}-falcon-autopatch{10,11,12}' --result-json /tmp/falcon.2.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - falcon.1.results
            - falcon.2.results
      - save_cache:
          key: tox-cache-falcon-{{ checksum "tox.ini" }}
          paths:
            - .tox

  django:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
      - image: redis:3.2
      - image: memcached:1.4
      - image: datadog/docker-dd-agent
        env:
            - DD_APM_ENABLED=true
            - DD_BIND_HOST=0.0.0.0
            - DD_API_KEY=invalid_key_but_this_is_fine
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-django-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-django{18,19,110,111}-djangopylibmc06-djangoredis45-pylibmc-redis{210}-memcached' --result-json /tmp/django.1.results
      - run: tox -e '{py27,py34,py35,py36}-django-autopatch{18,19,110,111}-djangopylibmc06-djangoredis45-pylibmc-redis{210}-memcached' --result-json /tmp/django.2.results
      - run: tox -e '{py27,py34,py35,py36}-django-drf{110,111}-djangorestframework{34,35,36,37}' --result-json /tmp/django.3.results
      - run: tox -e '{py34,py35,py36}-django{200}-djangopylibmc06-djangoredis45-pylibmc-redis{210}-memcached' --result-json /tmp/django.4.results
      - run: tox -e '{py34,py35,py36}-django-autopatch{200}-djangopylibmc06-djangoredis45-pylibmc-redis{210}-memcached' --result-json /tmp/django.5.results
      - run: tox -e '{py34,py35,py36}-django-drf{200}-djangorestframework{37}' --result-json /tmp/django.6.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - django.1.results
            - django.2.results
            - django.3.results
            - django.4.results
            - django.5.results
            - django.6.results
      - save_cache:
          key: tox-cache-django-{{ checksum "tox.ini" }}
          paths:
            - .tox

  flask:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
      - image: redis:3.2
      - image: memcached:1.4
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-flask-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-flask{010,011,012}-blinker' --result-json /tmp/flask.1.results
      - run: tox -e '{py27,py34,py35,py36}-flask-autopatch{010,011,012}-blinker' --result-json /tmp/flask.2.results
      - run: tox -e '{py27,py34,py35,py36}-flask{010,011,012}-flaskcache{013}-memcached-redis{210}-blinker' --result-json /tmp/flask.3.results
      - run: tox -e '{py27,py34,py35,py36}-flask-autopatch{010,011,012}-flaskcache{013}-memcached-redis{210}-blinker' --result-json /tmp/flask.4.results
      - run: tox -e '{py27}-flask{010,011}-flaskcache{012}-memcached-redis{210}-blinker' --result-json /tmp/flask.5.results
      - run: tox -e '{py27}-flask-autopatch{010,011}-flaskcache{012}-memcached-redis{210}-blinker' --result-json /tmp/flask.6.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - flask.1.results
            - flask.2.results
            - flask.3.results
            - flask.4.results
            - flask.5.results
            - flask.6.results
      - save_cache:
          key: tox-cache-flask-{{ checksum "tox.ini" }}
          paths:
            - .tox

  gevent:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-gevent-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-gevent{11,12}' --result-json /tmp/gevent.1.results
      - run: tox -e '{py27}-gevent{10}' --result-json /tmp/gevent.2.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - gevent.1.results
            - gevent.2.results
      - save_cache:
          key: tox-cache-gevent-{{ checksum "tox.ini" }}
          paths:
            - .tox

  httplib:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-httplib-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-httplib' --result-json /tmp/httplib.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - httplib.results
      - save_cache:
          key: tox-cache-httplib-{{ checksum "tox.ini" }}
          paths:
            - .tox

  mysqlconnector:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
      - image: mysql:5.7
        env:
            - MYSQL_ROOT_PASSWORD=admin
            - MYSQL_PASSWORD=test
            - MYSQL_USER=test
            - MYSQL_DATABASE=test
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-mysqlconnector-{{ checksum "tox.ini" }}
      - run: tox -e 'wait' mysql
      - run: tox -e '{py27,py34,py35,py36}-mysqlconnector{21}' --result-json /tmp/mysqlconnector.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - mysqlconnector.results
      - save_cache:
          key: tox-cache-mysqlconnector-{{ checksum "tox.ini" }}
          paths:
            - .tox

  mysqlpython:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
      - image: mysql:5.7
        env:
            - MYSQL_ROOT_PASSWORD=admin
            - MYSQL_PASSWORD=test
            - MYSQL_USER=test
            - MYSQL_DATABASE=test
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-mysqlpython-{{ checksum "tox.ini" }}
      - run: tox -e 'wait' mysql
      - run: tox -e '{py27,py34,py35,py36}-mysqlclient{13}' --result-json /tmp/mysqlpython.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - mysqlpython.results
      - save_cache:
          key: tox-cache-mysqlpython-{{ checksum "tox.ini" }}
          paths:
            - .tox

  mysqldb:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
      - image: mysql:5.7
        env:
            - MYSQL_ROOT_PASSWORD=admin
            - MYSQL_PASSWORD=test
            - MYSQL_USER=test
            - MYSQL_DATABASE=test
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-mysqldb-{{ checksum "tox.ini" }}
      - run: tox -e 'wait' mysql
      - run: tox -e '{py27}-mysqldb{12}' --result-json /tmp/mysqldb.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - mysqldb.results
      - save_cache:
          key: tox-cache-mysqldb-{{ checksum "tox.ini" }}
          paths:
            - .tox

  pymysql:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
      - image: mysql:5.7
        env:
            - MYSQL_ROOT_PASSWORD=admin
            - MYSQL_PASSWORD=test
            - MYSQL_USER=test
            - MYSQL_DATABASE=test
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-pymysql-{{ checksum "tox.ini" }}
      - run: tox -e 'wait' mysql
      - run: tox -e '{py27,py34,py35,py36}-pymysql{07,08}' --result-json /tmp/pymysql.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - pymysql.results
      - save_cache:
          key: tox-cache-pymysql-{{ checksum "tox.ini" }}
          paths:
            - .tox

  pylibmc:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
      - image: memcached:1.4
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-pylibmc-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-pylibmc{140,150}' --result-json /tmp/pylibmc.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - pylibmc.results
      - save_cache:
          key: tox-cache-pylibmc-{{ checksum "tox.ini" }}
          paths:
            - .tox

  pymongo:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
      - image: mongo:3.2
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-pymongo-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-pymongo{30,31,32,33,34}-mongoengine{011}' --result-json /tmp/pymongo.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - pymongo.results
      - save_cache:
          key: tox-cache-pymongo-{{ checksum "tox.ini" }}
          paths:
            - .tox

  pyramid:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-pyramid-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-pyramid{17,18,19}-webtest' --result-json /tmp/pyramid.1.results
      - run: tox -e '{py27,py34,py35,py36}-pyramid-autopatch{17,18,19}-webtest' --result-json /tmp/pyramid.2.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - pyramid.1.results
            - pyramid.2.results
      - save_cache:
          key: tox-cache-pyramid-{{ checksum "tox.ini" }}
          paths:
            - .tox

  requests:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-requests-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-requests{208,209,210,211,212,213}' --result-json /tmp/requests.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - requests.results
      - save_cache:
          key: tox-cache-requests-{{ checksum "tox.ini" }}
          paths:
            - .tox

  sqlalchemy:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
      - image: postgres:9.5
        env:
            - POSTGRES_PASSWORD=postgres
            - POSTGRES_USER=postgres
            - POSTGRES_DB=postgres
      - image: mysql:5.7
        env:
            - MYSQL_ROOT_PASSWORD=admin
            - MYSQL_PASSWORD=test
            - MYSQL_USER=test
            - MYSQL_DATABASE=test
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-sqlalchemy-{{ checksum "tox.ini" }}
      - run: tox -e 'wait' postgres mysql
      - run: tox -e '{py27,py34,py35,py36}-sqlalchemy{10,11}-psycopg2{27}-mysqlconnector{21}' --result-json /tmp/sqlalchemy.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - sqlalchemy.results
      - save_cache:
          key: tox-cache-sqlalchemy-{{ checksum "tox.ini" }}
          paths:
            - .tox

  psycopg:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
      - image: postgres:9.5
        env:
            - POSTGRES_PASSWORD=postgres
            - POSTGRES_USER=postgres
            - POSTGRES_DB=postgres
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-pycopg-{{ checksum "tox.ini" }}
      - run: tox -e 'wait' postgres
      - run: tox -e '{py27,py34,py35,py36}-psycopg2{24,25,26,27}' --result-json /tmp/psycopg.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - psycopg.results
      - save_cache:
          key: tox-cache-pycopg-{{ checksum "tox.ini" }}
          paths:
            - .tox

  aiobotocore:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
      - image: palazzem/moto:1.0.1
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-aiobotocore-{{ checksum "tox.ini" }}
      - run: tox -e '{py34,py35,py36}-aiobotocore{02,03,04}' --result-json /tmp/aiobotocore.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - aiobotocore.results
      - save_cache:
          key: tox-cache-aiobotocore-{{ checksum "tox.ini" }}
          paths:
            - .tox

  aiopg:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
      - image: postgres:9.5
        env:
            - POSTGRES_PASSWORD=postgres
            - POSTGRES_USER=postgres
            - POSTGRES_DB=postgres
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-aiopg-{{ checksum "tox.ini" }}
      - run: tox -e 'wait' postgres
      - run: tox -e '{py34,py35,py36}-aiopg{012,013}' --result-json /tmp/aiopg.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - aiopg.results
      - save_cache:
          key: tox-cache-aiopg-{{ checksum "tox.ini" }}
          paths:
            - .tox

  redis:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
      - image: redis:3.2
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-redis-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-redis{26,27,28,29,210}' --result-json /tmp/redis.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - redis.results
      - save_cache:
          key: tox-cache-redis-{{ checksum "tox.ini" }}
          paths:
            - .tox

  sqlite3:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-sqlite3-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34,py35,py36}-sqlite3' --result-json /tmp/sqlite3.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - sqlite3.results
      - save_cache:
          key: tox-cache-sqlite3-{{ checksum "tox.ini" }}
          paths:
            - .tox

  msgpack:
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
    steps:
      - checkout
      - restore_cache:
          keys:
              - tox-cache-msgpack-{{ checksum "tox.ini" }}
      - run: tox -e '{py27,py34}-msgpack{03,04}' --result-json /tmp/msgpack.results
      - persist_to_workspace:
          root: /tmp
          paths:
            - msgpack.results
      - save_cache:
          key: tox-cache-msgpack-{{ checksum "tox.ini" }}
          paths:
            - .tox

  deploy_dev:
    # build only the nightly package
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run: sudo apt-get -y install rake
      - run: sudo pip install mkwheelhouse sphinx awscli
      - run: S3_DIR=trace-dev rake release:docs
      - run: VERSION_SUFFIX=$CIRCLE_BRANCH$CIRCLE_BUILD_NUM S3_DIR=trace-dev rake release:wheel

  deploy_experimental:
    # build the develop branch releasing development docs
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run: sudo apt-get -y install rake
      - run: sudo pip install mkwheelhouse sphinx awscli
      - run: VERSION_SUFFIX=$CIRCLE_BRANCH$CIRCLE_BUILD_NUM S3_DIR=trace-dev rake release:wheel

  deploy_docs:
    # deploy official documentation
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run: sudo apt-get -y install rake
      - run: sudo pip install mkwheelhouse sphinx awscli wrapt
      - run: S3_DIR=trace rake release:docs

  wait_all_tests:
    # this step ensures all `tox` environments are properly executed
    docker:
      - image: datadog/docker-library:dd_trace_py_1_0_0
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run: ls /tmp/workspace/*
        # debug: shows how many time each test was executed
      - run: jq -s ".[]|.testenvs|keys|.[]" /tmp/workspace/* | grep -v GLOB | sed 's/"//g' | sort | uniq -c | sort -rn
        # list all executed test
      - run: jq -s ".[]|.testenvs|keys|.[]" /tmp/workspace/* | grep -v GLOB | sed 's/"//g' | sort | uniq | tee all_executed_tests
        # list all tests in tox.ini
      - run: tox -l | grep -v "^wait$" | sort > all_tests
        # checks that all tests were executed
      - run: diff all_tests all_executed_tests


workflows:
  version: 2
  test:
    jobs:
      - flake8
      - tracer
      - opentracer
      - integration
      - futures
      - boto
      - ddtracerun
      - asyncio
      - pylons
      - aiohttp
      - tornado
      - bottle
      - cassandra
      - celery
      - elasticsearch
      - falcon
      - django
      - flask
      - gevent
      - httplib
      - mysqlconnector
      - mysqlpython
      - mysqldb
      - pymysql
      - pylibmc
      - pymongo
      - pyramid
      - requests
      - sqlalchemy
      - psycopg
      - aiobotocore
      - aiopg
      - redis
      - sqlite3
      - msgpack
      - wait_all_tests:
          requires:
            - flake8
            - tracer
            - opentracer
            - integration
            - futures
            - boto
            - ddtracerun
            - asyncio
            - pylons
            - aiohttp
            - tornado
            - bottle
            - cassandra
            - celery
            - elasticsearch
            - falcon
            - django
            - flask
            - gevent
            - httplib
            - mysqlconnector
            - mysqlpython
            - mysqldb
            - pymysql
            - pylibmc
            - pymongo
            - pyramid
            - requests
            - sqlalchemy
            - psycopg
            - aiobotocore
            - aiopg
            - redis
            - sqlite3
            - msgpack
      - deploy_dev:
          requires:
            - wait_all_tests
          filters:
            branches:
              only: /(master)/
      - deploy_experimental:
          requires:
            - wait_all_tests
          filters:
            branches:
              only: /(develop)/
      - deploy_docs:
          requires:
            - wait_all_tests
          filters:
            # By default the job is available for a `release-vX.X.X`
            # version without manual approval. This simplifies a bit
            # the docs building.
            # NOTE: we may update this step so that a tag push with a
            # manual approval can trigger the documents building.
            branches:
              only: /release-v[0-9]+(\.[0-9]+)*/
