#!/usr/bin/env python3
import json
import os
import subprocess
import sys
import time
import urllib.request

from tenacity import retry
from tenacity import stop_after_attempt
from tenacity import wait_fixed


@retry(
    wait=wait_fixed(5),
    stop=stop_after_attempt(50),
)
def wait_for_app(url="http://localhost:5000"):
    return urllib.request.urlopen(url)


RUN_VARIANTS = ["enabled", "disabled"]
K6_VUS = os.getenv("K6_VUS", 1)
K6_ITERATIONS = os.getenv("K6_ITERATIONS", 1000)


def run():
    # TODO: use sirun's own capabilities to run variants and multiple iterations
    for run_variant in RUN_VARIANTS:
        for iteration in range(3):
            output_dir = os.path.join("/artifacts", "output", run_variant, f"{iteration}")
            os.makedirs(output_dir, exist_ok=True)
            sirun_output_path = os.path.join(output_dir, "sirun_output.ndjson")
            k6_output_path = os.path.join(output_dir, "k6_output.json")
            env = os.environ.copy()
            env["SIRUN_VARIANT"] = run_variant
            env["SIRUN_NO_STDIO"] = "1"
            sirunp = subprocess.Popen(["sirun", "meta.json"], stdout=subprocess.PIPE, env=env)
            wait_for_app()
            subprocess.run(
                f"k6 run --vus {K6_VUS} --iterations {K6_ITERATIONS} --summary-export={k6_output_path} script.js",
                shell=True,
            )
            # shutdown gunicorn to trigger metric collection
            subprocess.run("pkill -f gunicorn.pid", shell=True)
            assert sirunp.wait() == 0
            sirun_output = json.loads(sirunp.stdout.read().decode().strip())
            with open(sirun_output_path, "w") as fp:
                json.dump(sirun_output, fp)


if __name__ == "__main__":
    run()
